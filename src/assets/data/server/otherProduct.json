[
  {
    "id": 200,
    "date": "2019/01/03",
    "title": "Jenkins",
    "itemList": [
      {
        "text": "<p>Jenkins is an open source automation server written in Java. Jenkins helps to automate the non-human part of the software development process, with continuous integration and facilitating technical aspects of continuous delivery. It is a server-based system that runs in servlet containers such as Apache Tomcat. It supports version control tools, including AccuRev, CVS, Subversion, Git, Mercurial, Perforce, TD/OMS, ClearCase and RTC, and can execute Apache Ant, Apache Maven and sbt based projects as well as arbitrary shell scripts and Windows batch commands.</p><p>Jenkins can be installed through native system packages, Docker, or even run standalone by any machine with a Java Runtime Environment (JRE) installed.</p>",
        "image": ""
      },
      {
        "text": "<p>Jenkins initial admin password is stored in <code>/var/lib/jenkins/secrets/initialAdminPassword</code> on Linux.</p>",
        "image": ""
      },
      {
        "text": "<p>To check Jenkins status on Linux: <code>service jenkins status</code></p>",
        "image": ""
      },
      {
        "text": "Builds can be triggered by various means, for example by commit in a version control system, by scheduling via a cron-like mechanism and by requesting a specific build URL. It can also be triggered after the other builds in the queue have completed. Jenkins functionality can be extended with plugins.",
        "image": ""
      },
      {
        "text": "<b>Jenkins Pipeline</b><br/><p>Jenkins Pipeline (or simply 'Pipeline') is a suite of plugins which supports implementing and integrating continuous delivery pipelines into Jenkins.<p>A continuous delivery pipeline is an automated expression of your process for getting software from version control right through to your users and customers.</p><p>Jenkins Pipeline provides an extensible set of tools for modeling simple-to-complex delivery pipelines 'as code'. The definition of a Jenkins Pipeline is typically written into a text file (called a Jenkinsfile) which in turn is checked into a projectâ€™s source control repository.</p><p>Figure below shows a diagram of all the sections you can have in a Declarative Pipeline. The way to read this chart is that items with solid line borders are required, and items with dotted line borders are optional:</p>",
        "image": "../assets/image/it/tool/jenkinsPipeline.png",
        "imageClass": "mx-auto d-block"
      }
    ]
  },
  {
    "id": 300,
    "date": "2019/01/06",
    "title": "Gira",
    "itemList": [
      {
        "text": "<p>Jira is a proprietary issue tracking product developed by Atlassian that allows bug tracking and agile project management.</p>",
        "image": ""
      },
      {
        "text": "<p>For remote procedure calls (RPC), Jira supports REST, SOAP, and XML-RPC. Jira integrates with source control programs such as Clearcase, Concurrent Versions System (CVS), Git, Mercurial, Perforce, Subversion, and Team Foundation Server.</p>",
        "image": ""
      }
    ]
  },
  {
    "id": 400,
    "date": "2019/03/17",
    "title": "Dataweave",
    "itemList": [
      {
        "text": "<p><b>DataWeave Types</b><br/>DataWeave functions operate on data of many types, including <ul><li>Arrays</li><li>Booleans</li><li>CData</li><li>Date and Time</li><li>Enum</li><li>Iterator</li><li>Number</li><li>Object</li><li>Regex</li><li>String</li><li>TryResult</li></ul>The types that DataWeave provide are bundled into modules that also contain the related functions.</p>",
        "image": ""
      },
      {
        "text": "",
        "image": ""
      }
    ]
  },
  {
    "id": 500,
    "date": "2020/03/10",
    "title": "Autosys",
    "itemList": [
      {
        "text": "<p>Autosys is used to start Java process, takes backup of log files, stop Java process, cleaning and purging database and will all sort of housekeeping jobs in Linux environment. Autosys system is made of Autosys server and Autosys clients, each server or box, which has services scheduled by autosys, requires autosys client to be install on that. One of the key advantages of Autosys is that one job can depend upon another job, and can execute, depending upon, success and failure of parent job. Though Java developers are not asked a lot of interview questions, you might expect few of them during your interview with Wall Street banks, Brokers or Financial Institution, which uses autosys.</p>",
        "image": ""
      },
      {
        "text": "<p><b>Autosys Job Status</b></p><p><ul><li>STARTING</li><li>RUNNING</li><li>INACTIVE</li><li>ACTIVATED</li><li>SUCCESS</li><li>FAILURE</li><li>TERMINATED</li><li>RESTART</li><li>QUE_WAIT</li><li>ON HOLD</li><li>ON ICE</li></ul></p>",
        "image": "../assets/image/it/tool/onHoldvsOnIce.png",
        "imageClass": "mx-auto d-block"
      },
      {
        "text": "<p><b>Commands</b></p><p><ul><li><code>sendevent -E STARTJOB -J <i>job_name</i></code></li></p>",
        "image": ""
      }
    ]
  },
  {
    "id": 600,
    "date": "2019/11/30",
    "title": "Api Gateway",
    "itemList": [
      {
        "text": "<p>An API Gateway is a server that is the single entry point into the system. It is similar to the Facade pattern from object-oriented design. The API Gateway encapsulates the internal system architecture and provides an API that is tailored to each client. It might have other responsibilities such as authentication, monitoring, load balancing, caching, request shaping and management, and static response handling.</p><p>The following diagram shows how an API Gateway typically fits into the architecture:</p>",
        "image": "../assets/image/server/web/gateway.png",
        "imageHeight": "450",
        "imageWidth": "800"
      },
      {
        "text": "<p>A gateway helps to address these issues by decoupling clients from services. Gateways can perform a number of different functions, and you may not need all of them. The functions can be grouped into the following design patterns:</p><p>Gateway Routing. Use the gateway as a reverse proxy to route requests to one or more backend services, using layer 7 routing. The gateway provides a single endpoint for clients, and helps to decouple clients from services.</p><p>Gateway Aggregation. Use the gateway to aggregate multiple individual requests into a single request. This pattern applies when a single operation requires calls to multiple backend services. The client sends one request to the gateway. The gateway dispatches requests to the various backend services, and then aggregates the results and sends them back to the client. This helps to reduce chattiness between the client and the backend.</p><p>Gateway Offloading. Use the gateway to offload functionality from individual services to the gateway, particularly cross-cutting concerns. It can be useful to consolidate these functions into one place, rather than making every service responsible for implementing them. This is particularly true for features that requires specialized skills to implement correctly, such as authentication and authorization.</p><p>Here are some examples of functionality that could be offloaded to a gateway:<ul><li>SSL termination</li><li>Authentication</li><li>IP whitelisting</li><li>Client rate limiting (throttling)</li><li>Logging and monitoring</li><li>Response caching</li><li>Web application firewall</li><li>GZIP compression</li><li>Servicing static content</li></ul></p>",
        "image": ""
      },
      {
        "text": "<b>Choosing a gateway technology</b><p>Here are some options for implementing an API gateway in your application.<ul><li><b>Reverse proxy server</b>. Nginx and HAProxy are popular reverse proxy servers that support features such as load balancing, SSL, and layer 7 routing. They are both free, open-source products, with paid editions that provide additional features and support options. Nginx and HAProxy are both mature products with rich feature sets and high performance. You can extend them with third-party modules or by writing custom scripts in Lua. Nginx also supports a JavaScript-based scripting module called NginScript.</li><li><b>Service mesh ingress controller</b>. If you are using a service mesh such as linkerd or Istio, consider the features that are provided by the ingress controller for that service mesh. For example, the Istio ingress controller supports layer 7 routing, HTTP redirects, retries, and other features.</li><li><b>Azure Application Gateway</b>. Application Gateway is a managed load balancing service that can perform layer-7 routing and SSL termination. It also provides a web application firewall (WAF). Application Gateway and Web Application Firewall (WAF) are also available under a Standard_v2 and WAF_v2 SKU. The v2 SKU offers performance enhancements and adds support for critical new features like autoscaling, zone redundancy, and support for static VIPs. Existing features under the Standard and WAF SKU continue to be supported in the new v2 SKU. The new v2 SKU includes the following enhancements:<ul><li>Autoscaling</li><li>Zone redundancy</li><li>Static VIP</li><li>Header Rewrite</li><li>Key Vault Integration</li><li>Azure Kubernetes Service Ingress Controller</li><li>Performance enhancements</li><li>Faster deployment and update time</li></ul></li><li><b>Azure API Management</b>. API Management is a turnkey solution for publishing APIs to external and internal customers. It provides features that are useful for managing a public-facing API, including rate limiting, IP white listing, and authentication using Azure Active Directory or other identity providers. API Management doesn't perform any load balancing, so it should be used in conjunction with a load balancer such as Application Gateway or a reverse proxy. For information about using API Management with Application Gateway, see Integrate API Management in an internal VNet with Application Gateway.</li></ul></p>",
        "image": ""
      }
    ]
  },
  {
    "id": 700,
    "date": "2020/07/09",
    "title": "RabbitMQ",
    "itemList": [
      {
        "text": "<p>With tens of thousands of users, RabbitMQ is one of the most popular open source message brokers. RabbitMQ is lightweight and easy to deploy on premises and in the cloud. It supports multiple messaging protocols. RabbitMQ can be deployed in distributed and federated configurations to meet high-scale, high-availability requirements.</p>",
        "image": ""
      },
      {
        "text": "<p>use <code>rabbitmq-plugins enable rabbitmq_management</code> to enable UI</p>",
        "image": ""
      },
      {
        "text": "<p>use <code>rabbitmqctl status</code> to get status</p>",
        "image": ""
      },
      {
        "text": "<p>connect to RabbitMQ UI using http://localhost:15672/ (default user/password: guest/guest)</p>",
        "image": ""
      }
    ]
  },
  {
    "id": 800,
    "date": "2020/07/10",
    "title": "Kafka",
    "itemList": [
      {
        "text": "<p>Apache KafkaÂ® is a distributed streaming platform. It has three key capabilities:<ul><li>Publish and subscribe to streams of records, similar to a message queue or enterprise messaging system.</li><li>Store streams of records in a fault-tolerant durable way.</li><li>Process streams of records as they occur.</li></ul></p>",
        "image": "../assets/image/server/otherProduct/kafka.PNG",
        "imageClass": "mx-auto d-block"
      },
      {
        "text": "<p>Change to kafka base directory, and use <code>.\\bin\\windows\\zookeeper-server-start.bat .\\config\\zookeeper.properties</code> to start the zookeeper</p>",
        "image": ""
      },
      {
        "text": "<p>Change to kafka base directory, and use <code>.\\bin\\windows\\kafka-server-start.bat .\\config\\server.properties</code> to start the kafka server</p>",
        "image": ""
      }
    ]
  },
  {
    "id": 900,
    "date": "2020/07/15",
    "title": "Informatica",
    "itemList": [
      {
        "text": "<p>INFORMATICA is a Software development company, which offers data integration products. It offers products for ETL, data masking, data Quality, data replica, data virtualization, master data management, etc. Informatica Powercenter ETL/Data Integration tool is the most widely used tool and in the common term when we say Informatica, it refers to the Informatica PowerCenter tool for ETL.</p>",
        "image": "../assets/image/server/otherProduct/informaticaBI.PNG",
        "imageClass": "mx-auto d-block"
      },
      {
        "text": "<p>Informatica Powercenter is used for Data integration. It offers the capability to connect & fetch data from different heterogeneous source and processing of data. For example, you can connect to an SQL Server Database and Oracle Database both and can integrate the data into a third system.</p>",
        "image": "../assets/image/server/otherProduct/informaticaPowerCenter.PNG",
        "imageClass": "mx-auto d-block"
      },
      {
        "text": "<p>INFORMATICA Powercenter has four components: Repository Manager, DEsigner, Workflow Manager, Workflow Monitor.</p>",
        "image": "../assets/image/server/otherProduct/informatica.PNG",
        "imageClass": "mx-auto d-block"
      }
    ]
  },
  {
    "id": 1000,
    "date": "2020/10/20",
    "title": "Mulesoft",
    "itemList": [
      {
        "text": "<p>A Mule event contains the core information processed by the runtime. It travels through components inside your Mule app following the configured application logic.</p><p>Note that the Mule event is immutable, so every change to an instance of a Mule event results in the creation of a new instance.</p><p>A Mule event is generated when a trigger (such as an HTTP request or a change to a database or file) reaches the Event source of a flow. This trigger could be an external event triggered by a resource that might be external to the Mule app.</p>",
        "image": "../assets/image/server/otherProduct/mulesoftEvent.PNG",
        "imageClass": "mx-auto d-block"
      }
    ]
  },
  {
    "id": 1200,
    "date": "2020/10/20",
    "title": "Anypoint Platform CLI",
    "itemList": [
      {
        "text": "<p>Prerequisites:<ul><li>NodeJS and npm</li><li>Git</li><ul></p>",
        "image": ""
      },
      {
        "text": "<p>Installation: <code>npm install -g anypoint-cli@latest</code></p>",
        "image": ""
      },
      {
        "text": "<p>Usage: <code>anypoint-cli --username yupinggaogmail</code></p>",
        "image": ""
      }
    ]
  },
  {
    "id": 1300,
    "date": "2020/10/30",
    "title": "Salesforce",
    "itemList": [
      {
        "text": "<p><b>Salesforce Architecture</b><br>When you think about the Salesforce architecture, imagine a series of layers that sit on top of each other. Sometimes it helps to think of it as a cake because cake is delicious, and it makes everything better.</p>",
        "image": "../assets/image/server/otherProduct/salesforceArchitecture.PNG",
        "imageClass": "mx-auto d-block"
      },
      {
        "text": "<p><b>Thereâ€™s a lot to unpack here, but letâ€™s focus on the most important points.</b><ol><li>Salesforce is a cloud company. Everything we offer resides in the trusted, multitenant cloud.</li><li>The Salesforce platform is the foundation of our services. Itâ€™s powered by metadata and made up of different parts, like data services, artificial intelligence, and robust APIs for development.</li><li>All our apps sit on top of the platform. Our prebuilt offerings like Sales Cloud and Marketing Cloud, along with apps you build using the platform, have consistent, powerful functionality.</li><li>Everything is integrated. Our platform technologies like Einstein predictive intelligence and the Lightning framework for development are built into everything we offer and everything you build.</li></ol></p>",
        "image": ""
      },
      {
        "text": "<p><b>Differences Between Salesforce Classic vs Lightning</b><ol><li><b>Enhanced User Experience:</b> One of the major differences between Salesforce Classic and Salesforce Lightning is the user interface. The latter offers a much better user interface experience to its users that includes features like the drag-and-drop functionality that can be achieved without any code. Instead of hiring a Salesforce developer to create a Salesforce page or modify it, the page components can easily be rearranged by an admin according to their liking. <br>Furthermore, Lightning helps in toning down the need for Visualforce for every task. The codes that are created during any kind of development need to be tested and then deployed. In case of missed bugs, the code is sent back to the developer to fix and the process starts over again. But with the help of Salesforce Lightning, these types of tedious processes can be avoided. <br>Lightning does not mean that companies donâ€™t need Visualforce developers anymore. Lightning provides a helping hand to the developers by moving minor customization tasks to the admins, which allows developers to focus on larger Salesforce app development projects.</li><li><b>Higher Security:</b> With Salesforce Lightning comes enhanced security. For instance, LockerService is a feature that separates Lightning components for them to interact with each other. This helps in safeguarding the platform from malicious data. No such feature can be found in the Classic mode.<br>Permissions, too, work quite distinctly in Salesforce Lightning. The platform does not allow users to raise their assurance levels, say from standard to high, in-session. For that, they will have to log out of the Lightning platform and sign in again with authentication with a higher assurance level.</li><li><b>Einstein (Wave) Analytics:</b> While an enhanced and upgraded user interface and security are the points strong enough for the comparison, Salesforce Lightning also provides users with access to Einstein (Wave) Analytics reporting, which the Classic does not. For creating graphs, charts, and lists, the Salesforce Classic reports depend on standard reporting types. At the time the data is refreshed, these dashboards prove to be a great option for capturing a view of important metrics.<br>When we talk about Einstein Analytics, it is a whole different deal. The platform carries its own database that is fetched from Salesforce and updates each hour automatically. Also, the dashboard displays the most recent, refreshed data.</li><li><b>Progressive platform:</b> In its initial days, Lightning was looked down at because of its transition and compatibility issues with objects, custom code, and apps. But gone are those days, and the platform has evolved with the ability to support all custom metadata objects, making it a lot simpler for companies to transition their existing apps and workflows with no requirements of building from scratch.</li><li><b>Hassle-free Lead Generation: </b>Although Salesforce Classic enables you to create leads, the Lightning Experience offers more components in order to manage sales processes better. For instance, the Activity timeline in the Lightning mode allows users to identify whatâ€™s been achieved for a specific lead and presents the details of every meeting, task, or call. The Path component enables the tracking of various stages involved in the business process, whereas, the News component offers updates about the leads on time.</li></ol></p>",
        "image": ""
      },
      {
        "text": "<p><b>Aura Components</b><br>Aura components are the self-contained and reusable units of an app. They represent a reusable section of the UI, and can range in granularity from a single line of text to an entire app.</p>",
        "image": ""
      },
      {
        "text": "<p><b>Database in Context of Salesforce</b><br>When we talk about the database, think of a giant spreadsheet. When you put information into Salesforce, it gets stored in the database so you can access it again later. Itâ€™s stored in a very specific way so youâ€™re always accessing the information you need.</p>",
        "image": ""
      },
      {
        "text": "<p><b>Metadata</b><br>When you look at data in Salesforce, you might think that you're looking at a user interface sitting on top of a run-of-the-mill relational database. But what youâ€™re actually looking at is an abstraction of the database thatâ€™s driven by the platformâ€™s metadata-aware architecture.</p><p>In this abstraction, objects are our database tables. The fields on those objects are columns, and records are rows in the database. This analogy is true both for standard objects that come with Salesforce by default and custom objects that you build yourself.</p><p>In short, metadata forms the structure of your org. Whether youâ€™re defining fields, business processes, or something more complex, metadata holds your configuration. The platform then renders your appâ€™s metadata in the user interface along with its associated data.</p>",
        "image": ""
      },
      {
        "text": "<p><b>No-Code and Low-Code Development</b><br>It can be surprising to hear, but the Salesforce platform encourages you to minimize code. And itâ€™s not because we donâ€™t love code. Itâ€™s because the platformâ€™s metadata-driven architecture lets you complete most basic development tasks without ever writing a line.</p><p>Salesforce offers a host of tools for point-and-clickâ€”or declarativeâ€”development. Most of these tools require little to no understanding of development principles: no code.</p><p>Some development tasks, like writing validation rules or hooking up components with UI elements, are considered low code. That means they require some basic programmatic knowledge to complete, but arenâ€™t so rigorous that theyâ€™re considered programmatic. For example, if you know something about logic, conditions, and CRUD operations, you can do more with Process Builder.</p>",
        "image": ""
      },
      {
        "text": "<p><b>Salesforce Security</b><br>The platform makes it easy to specify which users can view, create, edit, or delete any record or field in the app. You can control access to your whole org, a specific object, a specific field, or even an individual record. By combining security controls at different levels, you can provide just the right level of data access to thousands of users without having to specify permissions for each user individually.</p>",
        "image": "../assets/image/server/otherProduct/salesforceSecurity.PNG",
        "imageClass": "mx-auto d-block"
      }
    ]
  },
  {
    "id": 1400,
    "date": "2020/11/22",
    "title": "Salesforce Tools",
    "itemList": [
      {
        "text": "<p><b>Automation Tools</b><p>One of the hardest things for an admin or a developer to figure out is when to use what tool for the job at hand. In general, itâ€™s best to start with declarative, no-code tools and work your way up to code solutions.</p><ul><li><b>Process Builder:</b> Use Process Builder when you need to start a behind-the-scenes business process automatically. Processes can start when:<br><ul><li>A record is created</li><li>A record is updated</li><li>A platform event occurs</li></ul></li><li><b>Flow Builder:</b> Use Flow Builder to:<ul><li>Automate a guided visual experience</li><li>Add more functionality for a behind-the-scenes process than is available in Process Builder. Use Flow Builder to build the more complex functionality. Then call the resulting flow from the process</li><li>Start a behind-the-scenes business process:<ul><li>When a user clicks something, like a button</li><li>When a record is created</li><li>When a record is updated</li><li>When a platform event occurs</li><li>At a specified time and frequency</li></ul></li></ul></li><li><b>Approvals:</b> Approvals isnâ€™t included in Lightning Flow, but it offers a declarative way to automate something that Lightning Flow doesnâ€™t cover. That said, Lightning Flow does support automating how a record gets submitted for approval.</li></ul></p>",
        "image": ""
      },
      {
        "text": "<p><b>Which Automation Tool Is Right for My Use Case?</b><br>When itâ€™s all said and done, a process-driven experience isnâ€™t backed by only one process. Itâ€™s a combination of all the business processes in your org that can impact your customer. Each business process typically falls into one of these camps.</p>",
        "image": "../assets/image/server/otherProduct/tools.PNG",
        "imageClass": "mx-auto d-block"
      }
    ]
  },
  {
    "id": 1500,
    "date": "2020/11/24",
    "title": "Salesforce Data Security",
    "itemList": [
      {
        "text": "<p><b>Levels of Data Access</b><p>You can control which users have access to which data in your whole org, a specific object, a specific field, or an individual record.</p>",
        "image": ""
      },
      {
        "text": "<p><b>Organization</b><p>For your whole org, you can maintain a list of authorized users, set password policies, and limit logins to certain hours and locations.</p>",
        "image": ""
      },
      {
        "text": "<p><b>Objects</b><p>Access to object-level data is the simplest thing to control. By setting permissions on a particular type of object, you can prevent a group of users from creating, viewing, editing, or deleting any records of that object. For example, you can use object permissions to ensure that interviewers can view positions and job applications but not edit or delete them.</p>",
        "image": ""
      },
      {
        "text": "<p><b>Fields</b><p>You can restrict access to certain fields, even if a user has access to the object. For example, you can make the salary field in a position object invisible to interviewers but visible to hiring managers and recruiters.</p>",
        "image": ""
      },
      {
        "text": "<p><b>Records</b><p>You can allow particular users to view an object, but then restrict the individual object records they're allowed to see. For example, an interviewer can see and edit her own reviews, but not the reviews of other interviewers. You can manage record-level access in these four ways.</p>",
        "image": ""
      },
      {
        "text": "<p><ul><li><b>Organization-wide defaults</b> specify the default level of access users have to each othersâ€™ records. You use org-wide sharing settings to lock down your data to the most restrictive level, and then use the other record-level security and sharing tools to selectively give access to other users.</li><li><b>Role hierarchies</b> give access for users higher in the hierarchy to all records owned by users below them in the hierarchy. Role hierarchies donâ€™t have to match your organization chart exactly. Instead, each role in the hierarchy should represent a level of data access that a user or group of users needs.</li><li><b>Sharing rules</b> are automatic exceptions to organization-wide defaults for particular groups of users, so they can get to records they donâ€™t own or canâ€™t normally see. Sharing rules, like role hierarchies, are only used to give additional users access to records. They canâ€™t be stricter than your organization-wide default settings.</li><li><b>Manual sharing</b> allows owners of particular records to share them with other users. Although manual sharing isnâ€™t automated like org-wide sharing settings, role hierarchies, or sharing rules, it can be useful in some situations, such as when a recruiter going on vacation needs to temporarily assign ownership of a job application to someone else.</li></ul></p>",
        "image": ""
      },
      {
        "text": "<p><b>Manage Object Permissions</b><p>The simplest way to control data access is to set permissions on a particular type of object. (An object is a collection of records, like leads or contacts.) You can control whether a group of users can create, view, edit, or delete any records of that object.</p><p>You can set object permissions with profiles or permission sets. A user can have one profile and many permission sets.<ul><li>A userâ€™s profile determines the objects they can access and the things they can do with any object record (such as create, read, edit, or delete).</li><li>Permission sets grant additional permissions and access settings to a user.</li></ul></p><p>Use profiles to grant the minimum permissions and settings that all users of a particular type need. Then use permission sets to grant more permissions as needed. The combination of profiles and permission sets gives you a great deal of flexibility in specifying object-level access.</p>",
        "image": ""
      },
      {
        "text": "<p><b>Use Profiles to Restrict Access</b><p>Each user has a single profile that controls which data and features that user has access to. A profile is a collection of settings and permissions. Profile settings determine which data the user can see, and permissions determine what the user can do with that data.<ul><li>The settings in a userâ€™s profile determine whether the user can see a particular app, tab, field, or record type.</li><li>The permissions in a userâ€™s profile determine whether the user can create or edit records of a given type, run reports, and customize the app.</li></ul></p><p>Profiles usually match up with a user's job function (for example, system administrator, recruiter, or hiring manager), but you can have profiles for anything that makes sense for your Salesforce org. A profile can be assigned to many users, but a user can have only one profile at a time.</p>",
        "image": ""
      }
    ]
  },
  {
    "id": 1600,
    "date": "2020/11/26",
    "title": "Salesforce Dashboard",
    "itemList": [
      {
        "text": "<p>A dashboard is a visual display of key metrics and trends for records in your org. The relationship between a dashboard component and report is 1:1; for each dashboard component, there is a single source report. However, you can use the same report in multiple dashboard components on a single dashboard (for example, use the same report in both a bar chart and pie chart). You can display multiple dashboard components on a single dashboard page, creating a powerful visual display and a way to consume multiple reports that often have a common theme, like sales performance or customer support.</p>",
        "image": ""
      },
      {
        "text": "<p>Like reports, dashboards are stored in folders, which control who has access. If you have access to a folder, you can view its dashboards. However, to view the dashboard components, you need access to the underlying reports as well.</p>",
        "image": ""
      },
      {
        "text": "<p>Each dashboard has a running user, whose security settings determine which data to display in a dashboard. If the running user is a specific user, all dashboard viewers see data based on the security settings of that userâ€”regardless of their own personal security settings. For this reason, youâ€™ll want to choose the running user wisely, so as not to open up too much visibility. For example, set the sales manager as the running user for a leaderboard for her team. This allows her team members to view the leaderboard for their individual team, but not other teams.</p>",
        "image": ""
      },
      {
        "text": "<p>Dynamic dashboards are dashboards for which the running user is always the logged-in user. This way, each user sees the dashboard according to his or her own access level. If youâ€™re concerned about too much access, dynamic dashboards might be the way to go.</p>",
        "image": ""
      }
    ]
  },
  {
    "id": 1700,
    "date": "2020/11/27",
    "title": "Apex",
    "itemList": [
      {
        "text": "<p>Apex is a case-insensitive language.</p>",
        "image": ""
      }
    ]
  }
]