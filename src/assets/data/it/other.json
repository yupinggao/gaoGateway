[
  {
    "id": 100,
    "date": "2019/01/15",
    "title": "NodeJS",
    "itemList": [
      {
        "text": "<p>Node.js is an open source javascript server environment. Node.js runs single-threaded, non-blocking, asynchronously programming, which is very memory efficient.</p>",
        "image": ""
      },
      {
        "text": "<p>Node.js can do the following: <ul><li>Generate dynamic page content</li><li>Create, open, read, write, delete, and close files on the server</li><li>Collect form data</li><li>Add, delete, modify data in your database</li><li>Create REST APIs</li><li>Consume REST APIs</li></ul></p>",
        "image": ""
      },
      {
        "text": "<b>URL Module:</b><br/><p><code>var url = require('url');</code><br/><code>var adr = 'http://localhost:8080/default.htm?year=2017&month=february';</code><br/><code>var q = url.parse(adr, true);</code><br/><code>console.log(q.host); //returns 'localhost:8080'</code><br/><code>console.log(q.pathname); //returns '/default.htm'</code><br/><code>console.log(q.search); //returns '?year=2017&month=february'</code><br/><code>var qdata = q.query; //returns an object: { year: 2017, month: 'february' }</code><br/><code>console.log(qdata.month); //returns 'february'</code></p>",
        "image": ""
      },
      {
        "text": "<b>Somethings to remember:</b><br/><p><ul><li>node.js uses unlink to delete a file <code>fs.unlink(filename, function (err) {... ...})</code></li><li>node.js uses formidable mudule for uploading files: <code>var formidable = require('formidable');</code></li><li>node.js uses nodemailer to handle emails: <code>var nodemailer = require('nodemailer');</code></li></ul></p>",
        "image": ""
      }
    ]
  },
  {
    "id": 200,
    "date": "2019/01/16",
    "title": "JavaScript 6/ECMAScript 6",
    "itemList": [
      {
        "text": "<p>JavaScript 6 or ECMAScript 6 (ECMA stands for European Computer Manufacturers Association) has some new features:<ul><li><code>let</code> statement allows you to declare a variable with block scope.</li><li><code>const</code> statement allows you to declare a constant.</li><li><code>exponentiation</code> operator (**) raises the first operand to the power of the second operand.</li><li>ES6 allows function parameters to have default values.</li><li><code>find()</code> method returns the value of the first array element that passes a test function.<br/><code>var numbers = [4, 9, 16, 25, 29];</code><br/><code>var first = numbers.find(myFunction);</code><br/><code>function myFunction(value, index, array) {</code><br/><code>&nbsp;&nbsp;&nbsp;return value > 18;</code><br/><code>}</code><br/></li><li><code>findIndex()</code> method returns the index of the first array element that passes a test function.</li><li>Arrow Functions (Lambda expression like function)</li></lu></p>",
        "image": ""
      }
    ]
  },
  {
    "id": 300,
    "date": "2019/01/24",
    "title": "CSS",
    "itemList": [
      {
        "text": "<p>The !important directive affects the way in which your CSS cascades while following the rules you feel are most crucial and should be applied. A rule that has the !important directive is always applied no matter where that rule appears in the CSS document.</p><p>To make the paragraph text always red, from the above example, you will use:<br/><code>p { color: red !important; }<br/>p { color: black; }</code></p>",
        "image": ""
      }
    ]
  },
  {
    "id": 400,
    "date": "2019/10/23",
    "title": "SASS",
    "itemList": [
      {
        "text": "<p>SASS (Syntactically Awesome Stylesheets) is a CSS pre-processor that lets you use variables, mathematical operations, mixins, loops, functions, imports, and other interesting functionalities that make writing CSS much more powerful. In some ways, you may think of SASS as a style sheet extension language because it extends the standard CSS characteristics by introducing the benefits of a basic programming language. So SASS will compile your code and generate the CSS output a browser can understand.</p>",
        "image": ""
      },
      {
        "text": "<p><b>It's CSS syntax friendly</b></p>",
        "image": ""
      },
      {
        "text": "<p><b>It offers variables for whatever you want</b></p>",
        "image": ""
      },
      {
        "text": "<p><b>It uses nested syntax</b></p>",
        "image": ""
      },
      {
        "text": "<p><b>It includes mixins</b></p>",
        "image": ""
      },
      {
        "text": "<p><b>You can divide and conquer</b></p>",
        "image": ""
      },
      {
        "text": "<p><b>It has a large community and is well documented</b></p>",
        "image": ""
      },
      {
        "text": "<p><b>If you know SASS, you can customize Bootstrap 4</b></p>",
        "image": ""
      }
    ]
  },
  {
    "id": 500,
    "date": "2019/01/26",
    "title": "Angular",
    "itemList": [
      {
        "text": "<b>Angular Component Lifecycle Hooks</b><p>Angular creates a component, renders it, creates and renders its children, checks it when its data-bound properties change, and destroys it before removing it from the DOM. Angular offers lifecycle hooks that provide visibility into these key life moments and the ability to act when they occur. A directive has the same set of lifecycle hooks.</p><p>Directive and component instances have a lifecycle as Angular creates, updates, and destroys them. Developers can tap into key moments in that lifecycle by implementing one or more of the lifecycle hook interfaces in the Angular core library. Each interface has a single hook method whose name is the interface name prefixed with ng. For example, the OnInit interface has a hook method named ngOnInit() that Angular calls shortly after creating the component. The following table lists the Lifecycle Method:</p>",
        "image": "../assets/image/it/other/angularLifeCycle.png"
      },
      {
        "text": "<b>Angular Directives</b><p>There are three kinds of directives in Angular:<ol><li>Components—directives with a template</li><li>Structural directives—change the DOM layout by adding and removing DOM elements. Two examples are NgFor and NgIf.</li><li>Attribute directives—change the appearance or behavior of an element, component, or another directive. The built-in NgStyle directive in the Template Syntax guide, for example, can change several element styles at the same time.</li></ol></p>",
        "image": ""
      },
      {
        "text": "<b>Angular Decorators</b><p>There are four types of decorators in Angular:<ol><li>Class decorators, e.g. @Component and @NgModule</li><li>Property decorators for properties inside classes, e.g. @Input and @Output</li><li>Method decorators for methods inside classes, e.g. @HostListener</li><li>Parameter decorators for parameters inside class constructors, e.g. @Inject</li></ol></p>",
        "image": ""
      }
    ]
  },
  {
    "id": 600,
    "date": "2019/01/26",
    "title": "New Features in Angular 6",
    "itemList": [
      {
        "text": "<p>Angular has come out with some amazing new features in version 6.0.0, especially in Angular-cli. Now, with Angular 6, you can easily update your old packages, create native web elements using Angular Elements, and many other things.</p>",
        "image": ""
      },
      {
        "text": "<b>ng add</b><p>ng add is a new command in Angular-cli that helps you install and download new packages in your angular apps. It works the same as npm, but it doesn’t replace it.<div class='jumbotron'>ng add @angular/elements</div></p>",
        "image": ""
      },
      {
        "text": "<b>ng update</b><p>ng update is a new Angular-cli command too. It’s used to update and upgrade your packages. It’s really helpful, for example, when you want to upgrade from Angular 5 to Angular 6, or any other package in your Angular app. <div class='jumbotron'>ng update @angular/core</div></p>",
        "image": ""
      },
      {
        "text": "<b>Declaring the providers inside the service itself</b><p>Before this update, you had to the declare the providers array in app.module.ts</p><p>Now with Angular 6, you can provide your service inside the supervisor itself by putting the providedIn:root property within the '@injectable' decorator. <div class='jumbotron'>import { Injectable } from '@angular/core'<br/><br/>@Injectable({<br/>&nbsp;&nbsp;&nbsp;&nbsp;providedIn: 'root'<br/>})</div></p>",
        "image": ""
      },
      {
        "text": "<b>Use ng-template instead of template directive</b><p>You can use ng-template to render the HTML instead of the template tag in the new version of Angular. ng-template is an Angular element, and it works when it is used with a structural directive such as *ngFor and *ngIf.</p>",
        "image": ""
      },
      {
        "text": "<b>Angular elements</b><p>Angular 6 introduced us to Angular elements. You’re able to render your Angular elements as native web elements, and they’re interpreted as trusted HTML elements.</p>",
        "image": ""
      },
      {
        "text": "<b>Upgrading to RxJS 6.0.0</b><p>Angular 6 uses the latest version of Rxjs library. Now you can enjoy the newest features of RxJS 6 in your Angular app.</p>",
        "image": ""
      }
    ]
  },
  {
    "id": 700,
    "date": "2019/10/28",
    "title": "Python",
    "itemList": [
      {
        "text": "<b>Python Features</b><p><ul><li>Simple and easy to learn</li><li>Free and open source</li><li>Support object-oriented as well as procedure-oriented programming</li><li>Extensible: Python code can invoke C and C++ libraries, and can be called from C++, and can integrate with java</li></ul></p>",
        "image": ""
      },
      {
        "text": "<b>Operators</b><p><ul><li>Arithmetic operators</li><li>Assignment Operators</li><li>Comparison operators</li><li>Logical Operators</li><li>Bitwise operators</li><li>Identity operators: check if two items are same or not</li><li>Membership Operators: if a element is in a list</li></ul></p>",
        "image": ""
      },
      {
        "text": "<b>Modules</b><p>Consider a module to be the same as a code library. A file containing a set of functions you want to include in your application. To create a module just save the code you want in a file with the file extension .py<ul><li>OS Module</li><li>Sys Module</li><li>Math Module</li><li>smtplib Module</li><li>io Module</li><li>Statistics Module</li><li>Collections Module</li><li>Random Module</li><li>Mailbox Module</li><li>Filecmp Module</li><li>ftplib Module</li></ul></p>",
        "image": ""
      },
      {
        "text": "<b>Data Types</b>",
        "image": "../assets/image/it/other/python_data_types.png",
        "imageClass": "mx-auto d-block"
      }
    ]
  },
  {
    "id": 800,
    "date": "2019/10/28",
    "title": "Groovy",
    "itemList": [
      {
        "text": "<P>Groovy is a powerful, optionally typed and dynamic language, with static-typing and static compilation capabilities, for the Java platform aimed at improving developer productivity thanks to a concise, familiar and easy to learn syntax. It integrates smoothly with any Java program, and immediately delivers to your application powerful features, including scripting capabilities, Domain-Specific Language authoring, runtime and compile-time meta-programming and functional programming.</p>",
        "image": ""
      },
      {
        "text": "<P>Difference between Java and Groovy </p><p><ul><li>Groovy and Java both are object-oriented programming languages whereas Groovy support scripting language as well.</li><li>In Java, you need the main method to make a class executable, in Groovy you don't need that.</li><li>In Java by default access modifier is package i.e. if you don't specify access modifier for fields, methods or class it becomes package-private, on Groovy things are by default public.</li><li>In Java, you need to provide getters and setters method for fields, especially if you are following Java Beans naming convention and use tools and libraries, which uses Reflection to dynamically access and mutate bean properties. In Groovy, getters and setters are automatically generated for class members.</li><li>Groovy is a superset of Java, which means a Java program will run fine in Groovy environment, but vice-versa may or may not run.</li></ul></p>",
        "image": ""
      },
      {
        "text": "<P><ul><li>Groovy uses <code>def</code> to declare a function outside a class</li><li>Grape is a JAR dependency manger</li></ul></p>",
        "image": ""
      }
    ]
  },
  {
    "id": 900,
    "date": "2019/01/26",
    "title": "JQuery",
    "itemList": [
      {
        "text": "<p>jQuery is a JavaScript Library. The jQuery library contains the following features:</p><ul><li>HTML/DOM manipulation</li><li>CSS manipulation</li><li>HTML event methods</li><li>Effects and animations</li><li>AJAX</li><li>Utilities</li></ul>",
        "image": ""
      },
      {
        "text": "<b>jQuery Syntax</b><p>The jQuery syntax is tailor-made for selecting HTML elements and performing some action on the element(s). Basic syntax is: <code>$(selector).action()</code><ol><li>A $ sign to define/access jQuery</li><li>A (selector) to 'query (or find)' HTML elements</li><li>A jQuery action() to be performed on the element(s)</li></ol></p>",
        "image": ""
      },
      {
        "text": "<b>Examples:</b><ol><li><code>$(this).hide()</code> - hides the current element.</li><li><code>$('p').hide()</code> - hides all 'p' elements</li><li><code>$('.test').hide()</code> - hides all elements with class='test'.</li><li><code>$('#test').hide()</code> - hides the element with id='test'.</li></ol></p>",
        "image": ""
      }
    ]
  },
  {
    "id": 1000,
    "date": "2019/01/30",
    "title": "Progress Web Apps (PWA)",
    "itemList": [
      {
        "text": "<b>Service Workers</b><p>A service worker is a script that your browser runs in the background, separate from a web page, opening the door to features that don't need a web page or user interaction. Today, they already include features like push notifications and background sync. In the future, service workers might support other things like periodic sync or geofencing. The core feature discussed in this tutorial is the ability to intercept and handle network requests, including programmatically managing a cache of responses.</p><p>The reason this is such an exciting API is that it allows you to support offline experiences, giving developers complete control over the experience.</p>",
        "image": ""
      },
      {
        "text": "<b>Things to note about a service worker:</b><p><ul><li>It's a JavaScript Worker, so it can't access the DOM directly. Instead, a service worker can communicate with the pages it controls by responding to messages sent via the postMessage interface, and those pages can manipulate the DOM if needed.</li><li>Service worker is a programmable network proxy, allowing you to control how network requests from your page are handled.</li><li>It's terminated when not in use, and restarted when it's next needed, so you cannot rely on global state within a service worker's onfetch and onmessage handlers. If there is information that you need to persist and reuse across restarts, service workers do have access to the IndexedDB API.</li><li>Service workers make extensive use of promises, so if you're new to promises, then you should stop reading this and check out Promises, an introduction.</li></ul></p>",
        "image": ""
      },
      {
        "text": "<b>The service worker life cycle</b><p>A service worker has a lifecycle that is completely separate from your web page.</p><p>To install a service worker for your site, you need to register it, which you do in your page's JavaScript. Registering a service worker will cause the browser to start the service worker install step in the background.<p>When installed, the activation step will follow and this is a great opportunity for handling any management of old caches, which we'll cover during the service worker update section.</p><p>After the activation step, the service worker will control all pages that fall under its scope, though the page that registered the service worker for the first time won't be controlled until it's loaded again. Once a service worker is in control, it will be in one of two states: either the service worker will be terminated to save memory, or it will handle fetch and message events that occur when a network request or message is made from your page.</p><p>Below is an overly simplified version of the service worker lifecycle on its first installation:</p>",
        "image": "../assets/image/it/other/sw-lifecycle.png"
      },
      {
        "text": "<b>Push Notification</b><p>Web push notifications allow users to opt-in to timely updates from sites they love and allow you to effectively re-engage them with customized, relevant content.</p><p>The Push API and Notification API open a whole new set of possibilities for you to re-engage with your users.</p>",
        "image": ""
      },
      {
        "text": "<p>Push is based on service workers because service workers operate in the background. This means the only time code is run for a push notification (in other words, the only time the battery is used) is when the user interacts with a notification by clicking it or closing it. If you're not familiar with them, check out the service worker introduction. We will use service worker code in later sections when we show you how to implement pushes and notifications.</p>",
        "image": ""
      },
      {
        "text": "<b>Two technologies</b><p>Push and notification use different, but complementary, APIs: push is invoked when a server supplies information to a service worker; a notification is the action of a service worker or web page script showing information to a user.</p>",
        "image": ""
      }
    ]
  },
  {
    "id": 1100,
    "date": "2019/11/30",
    "title": "Api Gateway",
    "itemList": [
      {
        "text": "<p>An API Gateway is a server that is the single entry point into the system. It is similar to the Facade pattern from object-oriented design. The API Gateway encapsulates the internal system architecture and provides an API that is tailored to each client. It might have other responsibilities such as authentication, monitoring, load balancing, caching, request shaping and management, and static response handling.</p><p>The following diagram shows how an API Gateway typically fits into the architecture:</p>",
        "image": "../assets/image/it/other/gateway.png",
        "imageHeight": "450",
        "imageWidth": "800"
      },
      {
        "text": "<p>A gateway helps to address these issues by decoupling clients from services. Gateways can perform a number of different functions, and you may not need all of them. The functions can be grouped into the following design patterns:</p><p>Gateway Routing. Use the gateway as a reverse proxy to route requests to one or more backend services, using layer 7 routing. The gateway provides a single endpoint for clients, and helps to decouple clients from services.</p><p>Gateway Aggregation. Use the gateway to aggregate multiple individual requests into a single request. This pattern applies when a single operation requires calls to multiple backend services. The client sends one request to the gateway. The gateway dispatches requests to the various backend services, and then aggregates the results and sends them back to the client. This helps to reduce chattiness between the client and the backend.</p><p>Gateway Offloading. Use the gateway to offload functionality from individual services to the gateway, particularly cross-cutting concerns. It can be useful to consolidate these functions into one place, rather than making every service responsible for implementing them. This is particularly true for features that requires specialized skills to implement correctly, such as authentication and authorization.</p><p>Here are some examples of functionality that could be offloaded to a gateway:<ul><li>SSL termination</li><li>Authentication</li><li>IP whitelisting</li><li>Client rate limiting (throttling)</li><li>Logging and monitoring</li><li>Response caching</li><li>Web application firewall</li><li>GZIP compression</li><li>Servicing static content</li></ul></p>",
        "image": ""
      },
      {
        "text": "<b>Choosing a gateway technology</b><p>Here are some options for implementing an API gateway in your application.<ul><li><b>Reverse proxy server</b>. Nginx and HAProxy are popular reverse proxy servers that support features such as load balancing, SSL, and layer 7 routing. They are both free, open-source products, with paid editions that provide additional features and support options. Nginx and HAProxy are both mature products with rich feature sets and high performance. You can extend them with third-party modules or by writing custom scripts in Lua. Nginx also supports a JavaScript-based scripting module called NginScript.</li><li><b>Service mesh ingress controller</b>. If you are using a service mesh such as linkerd or Istio, consider the features that are provided by the ingress controller for that service mesh. For example, the Istio ingress controller supports layer 7 routing, HTTP redirects, retries, and other features.</li><li><b>Azure Application Gateway</b>. Application Gateway is a managed load balancing service that can perform layer-7 routing and SSL termination. It also provides a web application firewall (WAF). Application Gateway and Web Application Firewall (WAF) are also available under a Standard_v2 and WAF_v2 SKU. The v2 SKU offers performance enhancements and adds support for critical new features like autoscaling, zone redundancy, and support for static VIPs. Existing features under the Standard and WAF SKU continue to be supported in the new v2 SKU. The new v2 SKU includes the following enhancements:<ul><li>Autoscaling</li><li>Zone redundancy</li><li>Static VIP</li><li>Header Rewrite</li><li>Key Vault Integration</li><li>Azure Kubernetes Service Ingress Controller</li><li>Performance enhancements</li><li>Faster deployment and update time</li></ul></li><li><b>Azure API Management</b>. API Management is a turnkey solution for publishing APIs to external and internal customers. It provides features that are useful for managing a public-facing API, including rate limiting, IP white listing, and authentication using Azure Active Directory or other identity providers. API Management doesn't perform any load balancing, so it should be used in conjunction with a load balancer such as Application Gateway or a reverse proxy. For information about using API Management with Application Gateway, see Integrate API Management in an internal VNet with Application Gateway.</li></ul></p>",
        "image": ""
      }
    ]
  },
  {
    "id": 1200,
    "date": "2020/01/02",
    "title": "YAML",
    "itemList": [
      {
        "text": "<p>YAML stands for 'YAML Ain't Markup Language'. At its core, a YAML file is used to describe data. One of the benefits of using YAML is that the information in a single YAML file can be easily translated to multiple language types.</p>",
        "image": ""
      },
      {
        "text": "<p><b>YAML Basic Rules</b></p><p><ul><li>YAML is case sensitive.</li><li>YAML does not allow the use of tabs. Spaces are used instead as tabs are not universally supported.</li></ul></p>",
        "image": ""
      },
      {
        "text": "<p><b>YAML Basic Data Types</b></p><p>YAML excels at working with mappings (hashes / dictionaries), sequences (arrays / lists), and scalars (strings / numbers). While it can be used with most programming languages, it works best with languages that are built around these data structure types. This includes: PHP, Python, Perl, JavaScript, and Ruby.</p>",
        "image": ""
      },
      {
        "text": "<p><b>Scalars</b></p><p>Scalars are a pretty basic concept. They are the strings and numbers that make up the data on the page. A scalar could be a boolean property, like Yes, integer (number) such as 5, or a string of text, like a sentence or the title of your website.</p>",
        "image": ""
      },      
      {
        "text": "<p><b>Sequences (List)</b></p><p>- cat<br>- dog</p>",
        "image": ""
      },      
      {
        "text": "<p><b>Mapping (Key/Value)</b></p><p>animal: pets</p>",
        "image": ""
      }
    ]
  }
]