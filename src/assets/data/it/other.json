[
  {
    "id": 100,
    "date": "2019/01/15",
    "title": "NodeJS",
    "itemList": [
      {
        "text": "<p>Node.js is an open source javascript server environment. Node.js runs single-threaded, non-blocking, asynchronously programming, which is very memory efficient.</p>",
        "image": ""
      },
      {
        "text": "<p>Node.js can do the following: <ul><li>Generate dynamic page content</li><li>Create, open, read, write, delete, and close files on the server</li><li>Collect form data</li><li>Add, delete, modify data in your database</li><li>Create REST APIs</li><li>Consume REST APIs</li></ul></p>",
        "image": ""
      },
      {
        "text": "<b>URL Module:</b><br/><p><code>var url = require('url');</code><br/><code>var adr = 'http://localhost:8080/default.htm?year=2017&month=february';</code><br/><code>var q = url.parse(adr, true);</code><br/><code>console.log(q.host); //returns 'localhost:8080'</code><br/><code>console.log(q.pathname); //returns '/default.htm'</code><br/><code>console.log(q.search); //returns '?year=2017&month=february'</code><br/><code>var qdata = q.query; //returns an object: { year: 2017, month: 'february' }</code><br/><code>console.log(qdata.month); //returns 'february'</code></p>",
        "image": ""
      },
      {
        "text": "<b>Somethings to remember:</b><br/><p><ul><li>node.js uses unlink to delete a file <code>fs.unlink(filename, function (err) {... ...})</code></li><li>node.js uses formidable mudule for uploading files: <code>var formidable = require('formidable');</code></li><li>node.js uses nodemailer to handle emails: <code>var nodemailer = require('nodemailer');</code></li></ul></p>",
        "image": ""
      },
      {
        "text": "<p>There is <b>kafka-node</b> package for kafka in Node. To install it: <code>npm install kafka-node --save</code></p>",
        "image": ""
      },
      {
        "text": "<p>There is <b>node-postgres</b> package for postgres in Node. To install it: <code>npm install pg</code>. It has support for callbacks, promises, async/await, connection pooling, prepared statements, cursors, streaming results, C/C++ bindings, rich type parsing, and more! Just like PostgreSQL itself there are a lot of features: this documentation aims to get you up and running quickly and in the right direction. It also tries to provide guides for more advanced & edge-case topics allowing you to tap into the full power of PostgreSQL from node.js.</p>",
        "image": ""
      }
    ]
  },
  {
    "id": 200,
    "date": "2019/01/16",
    "title": "JavaScript 6/ECMAScript 6",
    "itemList": [
      {
        "text": "<p>JavaScript 6 or ECMAScript 6 (ECMA stands for European Computer Manufacturers Association) has some new features:<ul><li><code>let</code> statement allows you to declare a variable with block scope.</li><li><code>const</code> statement allows you to declare a constant.</li><li><code>exponentiation</code> operator (**) raises the first operand to the power of the second operand.</li><li>ES6 allows function parameters to have default values.</li><li><code>find()</code> method returns the value of the first array element that passes a test function.<br/><code>var numbers = [4, 9, 16, 25, 29];</code><br/><code>var first = numbers.find(myFunction);</code><br/><code>function myFunction(value, index, array) {</code><br/><code>&nbsp;&nbsp;&nbsp;return value > 18;</code><br/><code>}</code><br/></li><li><code>findIndex()</code> method returns the index of the first array element that passes a test function.</li><li>Arrow Functions (Lambda expression like function)</li></lu></p>",
        "image": ""
      }
    ]
  },
  {
    "id": 300,
    "date": "2019/01/24",
    "title": "CSS",
    "itemList": [
      {
        "text": "<p>The !important directive affects the way in which your CSS cascades while following the rules you feel are most crucial and should be applied. A rule that has the !important directive is always applied no matter where that rule appears in the CSS document.</p><p>To make the paragraph text always red, from the above example, you will use:<br/><code>p { color: red !important; }<br/>p { color: black; }</code></p>",
        "image": ""
      }
    ]
  },
  {
    "id": 400,
    "date": "2019/10/23",
    "title": "SASS",
    "itemList": [
      {
        "text": "<p>SASS (Syntactically Awesome Stylesheets) is a CSS pre-processor that lets you use variables, mathematical operations, mixins, loops, functions, imports, and other interesting functionalities that make writing CSS much more powerful. In some ways, you may think of SASS as a style sheet extension language because it extends the standard CSS characteristics by introducing the benefits of a basic programming language. So SASS will compile your code and generate the CSS output a browser can understand.</p>",
        "image": ""
      },
      {
        "text": "<p><b>It's CSS syntax friendly</b></p>",
        "image": ""
      },
      {
        "text": "<p><b>It offers variables for whatever you want</b></p>",
        "image": ""
      },
      {
        "text": "<p><b>It uses nested syntax</b></p>",
        "image": ""
      },
      {
        "text": "<p><b>It includes mixins</b></p>",
        "image": ""
      },
      {
        "text": "<p><b>You can divide and conquer</b></p>",
        "image": ""
      },
      {
        "text": "<p><b>It has a large community and is well documented</b></p>",
        "image": ""
      },
      {
        "text": "<p><b>If you know SASS, you can customize Bootstrap 4</b></p>",
        "image": ""
      }
    ]
  },
  {
    "id": 500,
    "date": "2019/01/26",
    "title": "Angular",
    "itemList": [
      {
        "text": "<b>Angular Component Lifecycle Hooks</b><p>Angular creates a component, renders it, creates and renders its children, checks it when its data-bound properties change, and destroys it before removing it from the DOM. Angular offers lifecycle hooks that provide visibility into these key life moments and the ability to act when they occur. A directive has the same set of lifecycle hooks.</p><p>Directive and component instances have a lifecycle as Angular creates, updates, and destroys them. Developers can tap into key moments in that lifecycle by implementing one or more of the lifecycle hook interfaces in the Angular core library. Each interface has a single hook method whose name is the interface name prefixed with ng. For example, the OnInit interface has a hook method named ngOnInit() that Angular calls shortly after creating the component. The following table lists the Lifecycle Method:</p>",
        "image": "../assets/image/it/other/angularLifeCycle.png"
      },
      {
        "text": "<b>Angular Directives</b><p>There are three kinds of directives in Angular:<ol><li>Components—directives with a template</li><li>Structural directives—change the DOM layout by adding and removing DOM elements. Two examples are NgFor and NgIf.</li><li>Attribute directives—change the appearance or behavior of an element, component, or another directive. The built-in NgStyle directive in the Template Syntax guide, for example, can change several element styles at the same time.</li></ol></p>",
        "image": ""
      },
      {
        "text": "<b>Angular Decorators</b><p>There are four types of decorators in Angular:<ol><li>Class decorators, e.g. @Component and @NgModule</li><li>Property decorators for properties inside classes, e.g. @Input and @Output</li><li>Method decorators for methods inside classes, e.g. @HostListener</li><li>Parameter decorators for parameters inside class constructors, e.g. @Inject</li></ol></p>",
        "image": ""
      }
    ]
  },
  {
    "id": 600,
    "date": "2019/01/26",
    "title": "New Features in Angular 6",
    "itemList": [
      {
        "text": "<p>Angular has come out with some amazing new features in version 6.0.0, especially in Angular-cli. Now, with Angular 6, you can easily update your old packages, create native web elements using Angular Elements, and many other things.</p>",
        "image": ""
      },
      {
        "text": "<b>ng add</b><p>ng add is a new command in Angular-cli that helps you install and download new packages in your angular apps. It works the same as npm, but it doesn’t replace it.<div class='jumbotron'>ng add @angular/elements</div></p>",
        "image": ""
      },
      {
        "text": "<b>ng update</b><p>ng update is a new Angular-cli command too. It’s used to update and upgrade your packages. It’s really helpful, for example, when you want to upgrade from Angular 5 to Angular 6, or any other package in your Angular app. <div class='jumbotron'>ng update @angular/core</div></p>",
        "image": ""
      },
      {
        "text": "<b>Declaring the providers inside the service itself</b><p>Before this update, you had to the declare the providers array in app.module.ts</p><p>Now with Angular 6, you can provide your service inside the supervisor itself by putting the providedIn:root property within the '@injectable' decorator. <div class='jumbotron'>import { Injectable } from '@angular/core'<br/><br/>@Injectable({<br/>&nbsp;&nbsp;&nbsp;&nbsp;providedIn: 'root'<br/>})</div></p>",
        "image": ""
      },
      {
        "text": "<b>Use ng-template instead of template directive</b><p>You can use ng-template to render the HTML instead of the template tag in the new version of Angular. ng-template is an Angular element, and it works when it is used with a structural directive such as *ngFor and *ngIf.</p>",
        "image": ""
      },
      {
        "text": "<b>Angular elements</b><p>Angular 6 introduced us to Angular elements. You’re able to render your Angular elements as native web elements, and they’re interpreted as trusted HTML elements.</p>",
        "image": ""
      },
      {
        "text": "<b>Upgrading to RxJS 6.0.0</b><p>Angular 6 uses the latest version of Rxjs library. Now you can enjoy the newest features of RxJS 6 in your Angular app.</p>",
        "image": ""
      }
    ]
  },
  {
    "id": 700,
    "date": "2019/10/28",
    "title": "Python",
    "itemList": [
      {
        "text": "<b>Python Features</b><p><ul><li>Simple and easy to learn</li><li>Free and open source</li><li>Support object-oriented as well as procedure-oriented programming</li><li>Extensible: Python code can invoke C and C++ libraries, and can be called from C++, and can integrate with java</li></ul></p>",
        "image": ""
      },
      {
        "text": "<b>Operators</b><p><ul><li>Arithmetic operators</li><li>Assignment Operators</li><li>Comparison operators</li><li>Logical Operators</li><li>Bitwise operators</li><li>Identity operators: check if two items are same or not</li><li>Membership Operators: if a element is in a list</li></ul></p>",
        "image": ""
      },
      {
        "text": "<b>Modules</b><p>Consider a module to be the same as a code library. A file containing a set of functions you want to include in your application. To create a module just save the code you want in a file with the file extension .py<ul><li>OS Module</li><li>Sys Module</li><li>Math Module</li><li>smtplib Module</li><li>io Module</li><li>Statistics Module</li><li>Collections Module</li><li>Random Module</li><li>Mailbox Module</li><li>Filecmp Module</li><li>ftplib Module</li></ul></p>",
        "image": ""
      },
      {
        "text": "<b>Data Types</b>",
        "image": "../assets/image/it/other/python_data_types.png",
        "imageClass": "mx-auto d-block"
      }
    ]
  },
  {
    "id": 750,
    "date": "2020/09/20",
    "title": "Jython",
    "itemList": [
      {
        "text": "<p>Jython is the JVM implementation of the Python programming language. It is designed to run on the Java platform. A Jython program can import and use any Java class. Just as Java, Jython program compiles to bytecode. One of the main advantages is that a user interface designed in Python can use GUI elements of AWT, Swing or SWT Package.</p>",
        "image": ""
      },
      {
        "text": "<p>Jython, which started as JPython and was later renamed, follows closely the standard Python implementation called CPython</p>",
        "image": ""
      },
      {
        "text": "<b>Difference between Python and Jython</b><p><ul><li>Reference implementation of Python, called CPython, is written in C language. Jython on the other hand is completely written in Java and is a JVM implementation</li><li>Standard Python is available on multiple platforms. Jython is available for any platform with a JVM installed on it</li><li>Standard Python code compiles to a .pyc file, while Jython program compiles to a .class file</li><li>Python extensions can be written in C language. Extensions for Jython are written in Java</li><li>Jython is truly multi-threaded in nature. Python however uses the Global Interpreter Lock (GIL) mechanism for the purpose</li><li>Both implementations have different garbage collection mechanisms</li></ul></p>",
        "image": ""
      }
    ]
  },
  {
    "id": 780,
    "date": "2020/09/20",
    "title": "Use wsadmin",
    "itemList": [
      {
        "text": "<p>The wsadmin tool provides the ability to automate configuration tasks for your environment by running scripts. The wsadmin tool utilizes a set of management objects which allow you to run commands and command parameters to configure your environment. Use the AdminConfig, AdminControl, AdminApp, AdminTask, and Help objects to perform administrative tasks. However, there are some limitations for using the wsadmin tool, including:<ul><li>The wsadmin tool only supports the Jython and Jacl scripting languages</li><li>It is not available in WAS Liberty</li></ul></p>",
        "image": ""
      },
      {
        "text": "<b>Procedure</b><br><p><ul><li>Use the AdminConfig object, the AdminTask object, and the AdminApp object to handle configuration functionality. The AdminConfig object, the AdminTask object, and the AdminApp object are used when you are managing the configuration of the server that resides persistently in a repository on permanent storage. Use these objects to create, query, change, or remove this configuration without starting an application server process. To use the AdminTask object, you must be connected to a running server.</li><li>Use the AdminControl object to manage running objects on application server installations. The AdminControl object is used when managing the running instance of an application server by a Java™ Management Extensions (JMX) MBean. This instance can have attributes that you can interrogate and change, and operations that you can invoke. These operational actions that are taken against a running application server do not have an effect on the persistent configuration of the server. The attributes that support manipulation from an MBean differ from the attributes that the corresponding configuration supports. The configuration can include many attributes that you cannot query or set from the running object. The application server scripting support provides functions to locate configuration objects and running objects. The objects in the configuration do not always represent objects that are currently running. The AdminControl object manages running objects.</li><li>Use the Help object to obtain information about the AdminConfig, AdminApp, AdminControl, and AdminTask objects, to obtain interface information about running MBeans, and to obtain help for warnings and error messages.</li><ul></p>",
        "image": ""
      },
      {
        "text": "<p>Launch the wsadmin tool using Jython: <code>wsadmin.sh -lang jython</code></p>",
        "image": ""
      },
      {
        "text": "<p>Launch the wsadmin tool using Jython when security is enabled: <code>wsadmin.sh -lang jython -user user_name -password password</code></p>",
        "image": ""
      },
      {
        "text": "<p>Run the wsadmin tool with the -f option, and place the commands that you want to run into the file: <code>wsadmin.sh -lang jython -f  test.py</code> - where the test.py is a file which contains the some commands, such as:<code><br>apps = AdminApp.list()<br>print apps</code></p>",
        "image": ""
      }
    ]
  },
  {
    "id": 800,
    "date": "2019/10/28",
    "title": "Groovy",
    "itemList": [
      {
        "text": "<P>Groovy is a powerful, optionally typed and dynamic language, with static-typing and static compilation capabilities, for the Java platform aimed at improving developer productivity thanks to a concise, familiar and easy to learn syntax. It integrates smoothly with any Java program, and immediately delivers to your application powerful features, including scripting capabilities, Domain-Specific Language authoring, runtime and compile-time meta-programming and functional programming.</p>",
        "image": ""
      },
      {
        "text": "<P>Difference between Java and Groovy </p><p><ul><li>Groovy and Java both are object-oriented programming languages whereas Groovy support scripting language as well.</li><li>In Java, you need the main method to make a class executable, in Groovy you don't need that.</li><li>In Java by default access modifier is package i.e. if you don't specify access modifier for fields, methods or class it becomes package-private, on Groovy things are by default public.</li><li>In Java, you need to provide getters and setters method for fields, especially if you are following Java Beans naming convention and use tools and libraries, which uses Reflection to dynamically access and mutate bean properties. In Groovy, getters and setters are automatically generated for class members.</li><li>Groovy is a superset of Java, which means a Java program will run fine in Groovy environment, but vice-versa may or may not run.</li></ul></p>",
        "image": ""
      },
      {
        "text": "<P><ul><li>Groovy uses <code>def</code> to declare a function outside a class</li><li>Grape is a JAR dependency manger</li></ul></p>",
        "image": ""
      }
    ]
  },
  {
    "id": 900,
    "date": "2019/01/26",
    "title": "JQuery",
    "itemList": [
      {
        "text": "<p>jQuery is a JavaScript Library. The jQuery library contains the following features:</p><ul><li>HTML/DOM manipulation</li><li>CSS manipulation</li><li>HTML event methods</li><li>Effects and animations</li><li>AJAX</li><li>Utilities</li></ul>",
        "image": ""
      },
      {
        "text": "<b>jQuery Syntax</b><p>The jQuery syntax is tailor-made for selecting HTML elements and performing some action on the element(s). Basic syntax is: <code>$(selector).action()</code><ol><li>A $ sign to define/access jQuery</li><li>A (selector) to 'query (or find)' HTML elements</li><li>A jQuery action() to be performed on the element(s)</li></ol></p>",
        "image": ""
      },
      {
        "text": "<b>Examples:</b><ol><li><code>$(this).hide()</code> - hides the current element.</li><li><code>$('p').hide()</code> - hides all 'p' elements</li><li><code>$('.test').hide()</code> - hides all elements with class='test'.</li><li><code>$('#test').hide()</code> - hides the element with id='test'.</li></ol></p>",
        "image": ""
      }
    ]
  },
  {
    "id": 1000,
    "date": "2019/01/30",
    "title": "Progress Web Apps (PWA)",
    "itemList": [
      {
        "text": "<b>Service Workers</b><p>A service worker is a script that your browser runs in the background, separate from a web page, opening the door to features that don't need a web page or user interaction. Today, they already include features like push notifications and background sync. In the future, service workers might support other things like periodic sync or geofencing. The core feature discussed in this tutorial is the ability to intercept and handle network requests, including programmatically managing a cache of responses.</p><p>The reason this is such an exciting API is that it allows you to support offline experiences, giving developers complete control over the experience.</p>",
        "image": ""
      },
      {
        "text": "<b>Things to note about a service worker:</b><p><ul><li>It's a JavaScript Worker, so it can't access the DOM directly. Instead, a service worker can communicate with the pages it controls by responding to messages sent via the postMessage interface, and those pages can manipulate the DOM if needed.</li><li>Service worker is a programmable network proxy, allowing you to control how network requests from your page are handled.</li><li>It's terminated when not in use, and restarted when it's next needed, so you cannot rely on global state within a service worker's onfetch and onmessage handlers. If there is information that you need to persist and reuse across restarts, service workers do have access to the IndexedDB API.</li><li>Service workers make extensive use of promises, so if you're new to promises, then you should stop reading this and check out Promises, an introduction.</li></ul></p>",
        "image": ""
      },
      {
        "text": "<b>The service worker life cycle</b><p>A service worker has a lifecycle that is completely separate from your web page.</p><p>To install a service worker for your site, you need to register it, which you do in your page's JavaScript. Registering a service worker will cause the browser to start the service worker install step in the background.<p>When installed, the activation step will follow and this is a great opportunity for handling any management of old caches, which we'll cover during the service worker update section.</p><p>After the activation step, the service worker will control all pages that fall under its scope, though the page that registered the service worker for the first time won't be controlled until it's loaded again. Once a service worker is in control, it will be in one of two states: either the service worker will be terminated to save memory, or it will handle fetch and message events that occur when a network request or message is made from your page.</p><p>Below is an overly simplified version of the service worker lifecycle on its first installation:</p>",
        "image": "../assets/image/it/other/sw-lifecycle.png"
      },
      {
        "text": "<b>Push Notification</b><p>Web push notifications allow users to opt-in to timely updates from sites they love and allow you to effectively re-engage them with customized, relevant content.</p><p>The Push API and Notification API open a whole new set of possibilities for you to re-engage with your users.</p>",
        "image": ""
      },
      {
        "text": "<p>Push is based on service workers because service workers operate in the background. This means the only time code is run for a push notification (in other words, the only time the battery is used) is when the user interacts with a notification by clicking it or closing it. If you're not familiar with them, check out the service worker introduction. We will use service worker code in later sections when we show you how to implement pushes and notifications.</p>",
        "image": ""
      },
      {
        "text": "<b>Two technologies</b><p>Push and notification use different, but complementary, APIs: push is invoked when a server supplies information to a service worker; a notification is the action of a service worker or web page script showing information to a user.</p>",
        "image": ""
      }
    ]
  },
  {
    "id": 1200,
    "date": "2020/01/02",
    "title": "YAML",
    "itemList": [
      {
        "text": "<p>YAML stands for 'YAML Ain't Markup Language'. At its core, a YAML file is used to describe data. One of the benefits of using YAML is that the information in a single YAML file can be easily translated to multiple language types.</p>",
        "image": ""
      },
      {
        "text": "<p><b>YAML Basic Rules</b></p><p><ul><li>YAML is case sensitive.</li><li>YAML does not allow the use of tabs. Spaces are used instead as tabs are not universally supported.</li></ul></p>",
        "image": ""
      },
      {
        "text": "<p><b>YAML Basic Data Types</b></p><p>YAML excels at working with mappings (hashes / dictionaries), sequences (arrays / lists), and scalars (strings / numbers). While it can be used with most programming languages, it works best with languages that are built around these data structure types. This includes: PHP, Python, Perl, JavaScript, and Ruby.</p>",
        "image": ""
      },
      {
        "text": "<p><b>Scalars</b></p><p>Scalars are a pretty basic concept. They are the strings and numbers that make up the data on the page. A scalar could be a boolean property, like Yes, integer (number) such as 5, or a string of text, like a sentence or the title of your website.</p>",
        "image": ""
      },      
      {
        "text": "<p><b>Sequences (List/Array)</b></p><p>names:<br>- cat<br>- dog</p>or names: [cat, dog] ",
        "image": ""
      },  
      {
        "text": "<p><b>Dictionary</b></p><p>foo: bar<br>bar: foo</p> or {foo: bar, bar: foo}",
        "image": ""
      },             
      {
        "text": "<p><b>Mapping (Key/Value)</b></p><p>animal: pets</p>",
        "image": ""
      }
    ]
  },
  {
    "id": 1300,
    "date": "2020/03/03",
    "title": "JSON",
    "itemList": [
      {
        "text": "<p>YAML stands for 'YAML Ain't Markup Language'. At its core, a YAML file is used to describe data. One of the benefits of using YAML is that the information in a single YAML file can be easily translated to multiple language types.</p>",
        "image": ""
      },
      {
        "text": "<p><b>YAML Basic Rules</b></p><p><ul><li>YAML is case sensitive.</li><li>YAML does not allow the use of tabs. Spaces are used instead as tabs are not universally supported.</li></ul></p>",
        "image": ""
      },
      {
        "text": "<p><b>YAML Basic Data Types</b></p><p>YAML excels at working with mappings (hashes / dictionaries), sequences (arrays / lists), and scalars (strings / numbers). While it can be used with most programming languages, it works best with languages that are built around these data structure types. This includes: PHP, Python, Perl, JavaScript, and Ruby.<br><ul><li>String - written in double quotes</li><li>Number - integer or a floating point</li><li>Json object - 'employee':{ 'name':'John', 'age':30, 'city':'New York' }</li><li>Array - 'employees':[ 'John', 'Anna', 'Peter' ]</li><li>Boolean</li><li>null</li></ul></p>",
        "image": ""
      }
    ]
  },
  {
    "id": 1400,
    "date": "2020/07/20",
    "title": "Joi",
    "itemList": [
      {
        "text": "<p>Joi is the most widely adopted package for object schema descriptions and validation in Node. Joi allows us to create blueprints of Javascript objects that ensure that we process and ultimately accept accurate data.</p>",
        "image": ""
      }
    ]
  },
  {
    "id": 1500,
    "date": "2020/07/20",
    "title": "Express",
    "itemList": [
      {
        "text": "<p>Express.js, or simply Express, is a web application framework for Node.js, released as free and open-source software under the MIT License. It is designed for building web applications and APIs. It has been called the de facto standard server framework for Node.js.</p>",
        "image": ""
      }
    ]
  },
  {
    "id": 1600,
    "date": "2020/07/14",
    "title": "HL7",
    "itemList": [
      {
        "text": "<p>Fast Healthcare Interoperability Resources (FHIR, pronounced 'fire') is a standard describing data formats and elements (known as 'resources') and an application programming interface (API) for exchanging electronic health records (EHR). The standard was created by the Health Level Seven International (HL7) health-care standards organization.</p><p>FHIR builds on previous data format standards from HL7, like HL7 version 2.x and HL7 version 3.x. But it is easier to implement because it uses a modern web-based suite of API technology, including a HTTP-based RESTful protocol, HTML and Cascading Style Sheets for user interface integration, a choice of JSON, XML or RDF for data representation, and Atom for results. One of its goals is to facilitate interoperation between legacy health care systems, to make it easy to provide health care information to health care providers and individuals on a wide variety of devices from computers to tablets to cell phones, and to allow third-party application developers to provide medical applications which can be easily integrated into existing systems.</p>",
        "image": ""
      },
      {
        "text": "<p><b>Four Components:<br></b><ol><li>Infomation Model - data content and format: JSON, XML, Turtle RDF</li><li>Usage - mechanisms for data exchange</li><li>Conformance - constrains and validaty</li><li>Terminology - clinical termininologies and ontology</li></ol></p>",
        "image": ""
      },
      {
        "text": "<p><b>Data Types</b></p>",
        "image": "../assets/image/it/other/hl7_data_types.png",
        "imageClass": "mx-auto d-block"
      },
      {
        "text": "<p><b>Notes:<br></b><ul><li>FHIR data structure is defined by specification, and cannot be changed by users.</li><li>The formal MIME-type for FHIR resources is <b>application/fhir+xml</b> or <b>application/fhir+json</b>.</li></ul></p>",
        "image": ""
      },
      {
        "text": "<p><b>Acronyms</b></p><p><ol><li><b>C-CDA</b> – Consolidated Clinical Document Architecture</li><li><b>DSTU2</b> - Draft Standard for Trial Use</li><li><b>EHR</b> - Electronic Health Records. Electronic health records are digital versions of a patient chart, but it is a more detailed record of a patient’s medical history.</li><li><b>EMR</b> - Electronic Medical Records. Electronic medical records are digital versions of paper charts that clinicians and healthcare workers use at the office. An EMR usually contains a patient’s medical and treatment history in one area of healthcare practice.</li><li><b>HIPAA</b> - Health Insurance Portability and Accountability Act</li><li><b>PHI</b> - Protected Health Information</li><li><b>RDF</b> - Resource Description Framework</li><li><b>SMART</b> - Substitutable Medical Applications, Reusable Technologies</li><li><b>TTL</b> - Time To Live</li><li><b>Turtle</b> - Terse RDF Triple Language</li></ol></p>",
        "image": ""
      }
    ]
  },
  {
    "id": 1700,
    "date": "2020/08/13",
    "title": "HTTP Status Codes for DHIR PHIX FHIR API in MOH",
    "itemList": [
      {
        "text": "<p><b>2xx:<br></b><ul><li>4204 - No Content with no response payload</li></ul></p>",
        "image": ""
      },
      {
        "text": "<p><b>4xx:<br></b><ul><li>401 - Not Authorized</li><li>405 - Method Not Allowed</li><li>409/412 - Version Conflict Management</li><li>422 - Unprocessable Entity. Violation of business rules</li><li>409/412 - Version Conflict Management</li></ul></p>",
        "image": ""
      },
      {
        "text": "<p><b>5xx:</b></p><p><ul><li></li></ul></p>",
        "image": ""
      }
    ]
  },
  {
    "id": 1780,
    "date": "2020/08/14",
    "title": "Regular Expression (regex) in Java",
    "itemList": [
      {
        "text": "<p>Brackets are used to find a range of characters:</p>",
        "image": "../assets/image/it/other/regex1.PNG",
        "imageClass": "mx-auto d-block"
      },
      {
        "text": "<p>Metacharacters are characters with a special meaning:</p>",
        "image": "../assets/image/it/other/regex2.PNG",
        "imageClass": "mx-auto d-block"
      },
      {
        "text": "<p>Quantifiers define quantities:</p>",
        "image": "../assets/image/it/other/regex3.PNG",
        "imageClass": "mx-auto d-block"
      }
    ]
  },
  {
    "id": 2000,
    "date": "2019/10/29",
    "title": "Acronyms",
    "itemList": [
      {
        "text": "<p><b>A - G</b></p><p><ol><li><b>ACI</b> - Azure Container Instances</li><li><b>ADAL</b> -  Active Directory Authentication Library</li><li><b>ACR</b> - Azure Container Registry</li><li><b>ACS</b> - Access Control Server</li><li><b>ADAL</b> - Active Directory Authentication Library</li><li><b>APF</b> - API Priority and Fairness feature</li><li><b>AMQP</b> - Advanced Message Queuing Protocol</li><li><b>APM</b> - Application performance monitoring</li><li><b>BBS</b> - Bulletin Board System</li><li><b>BDD</b> - Behavior Driven Development</li><li><b>CCM</b> – cloud controller manager</li><li><b>CDI</b> – Context and Dependency Injection</li><li><b>CDN</b> – Content Delivery Network</li><li><b>CFAR</b> –  Cloud Foundry Application Runtime</li><li><b>CFEE</b> –  Cloud Foundry Enterprise Environment</li><li><b>CFS</b> – Completely Fair Scheduler - is a process scheduler which was merged into the 2.6.23 (October 2007) release of the Linux kernel and is the default scheduler</li><li><b>CGROUP</b> – Control Group</li><li><b>CIDR</b> – Classless inter-domain routing</li><li><b>CNAME</b> – Canonical Name</li><li><b>CNI</b> – Container Network Interface</li><li><b>CNM</b> – Container Network Model</li><li><b>CORS</b> – Cross-Origin Resource Sharing</li><li><b>CQRS</b> – Command Query Responsibility Segregation</li><li><b>CRD</b> – Custom Resource Definition</li><li><b>CRI</b> – Container Runtime Interface</li><li><b>CSI</b> – Container Storage Interface</li><li><b>cURL</b> - Client URL Request Library</li><li><b>ETag</b> - Entity tag. A part of HTTP. An ETag is an opaque identifier assigned by a Web server to a specific version of a resource found at a URL. If the resource representation at that URL ever changes, a new and different ETag is assigned. Used in this manner, ETags are similar to fingerprints and can quickly be compared to determine whether two representations of a resource are the same.</li><li><b>FHIR</b> - Fast Healthcare Interoperability Resource</li><li><b>GIL</b> - Global Interpreter Lock</li><li><b>GMSA</b> - Group Managed Service Accounts</li></ol></p>",
        "image": ""
      },
      {
        "text": "<p><b>H - N</b></p><p><ol><li><b>HATEOAS</b> - Hypermedia as the Engine of Application State</li><li><b>HPA</b> - Horizontal Pod Autoscaler</li><li><b>IDC</b> - International Data Corporation.</li><li><b>IPVS</b> - IP Virtual Server</li><li><b>IPC</b> - Inter Process Communication</li><li><b>ISV</b> - Independent Software Vendor</li><li><b>IWA</b> - Integrated Windows Authentication</li><li><b>JOSE</b> - JSON Object Signing and Encription</li><li><b>JWKS</b> - JSON Web Key Set</li><li><b>KCD</b> - Kerberos Constrained Delegation.</li><li><b>KMS</b> - Key Management Service.</li><li><b>LAMP</b> - Linux, Apache, MySQL, and PHP/Python/Perl</li><li><b>LRP</b> - Long-Running Process</li><li><b>MDM</b> - Mobile Device Management</li><li><b>MEAN</b> - MongoDB, ExpressJS, AngularJS and Node.js</li><li><b>MQTT</b> - Message Queuing Telemetry Transport</li><li><b>MSAL</b> - Microsoft Authentication Library</li><li><b>MTU</b> - Maximum Transmission Unit</li><li><b>NTP</b> - Network Time Protocol</li><li><b>NUMA</b> - Non-uniform memory access</li></ol></p>",
        "image": ""
      },
      {
        "text": "<p><b>O - T</b></p><p><ol><li><b>OCI</b> - Open Container Initiative</li><li><b>OWASP</b> - Open Web Application Security Project</li><li><b>PDB</b> - PodDisruptionBudget object. A PDB limits the number of pods of a replicated application that are down simultaneously from voluntary disruptions.</li><li><b>PLEG</b> - Pod Lifecycle Event Generator</li><li><b>PVC</b> - Persistent Volume Claim</li><li><b>QPS</b> - Queries per second</li><li><b>RHEL</b> - Red Hat Enterprise Linux</li><li><b>RMS</b> - Rights Management Services</li><li><b>S2S</b> - Site to Site</li><li><b>SCC</b> - Security Command Center</li><li><b>SCIM</b> - System for Cross-Domain Identity Management</li><li><b>SCTP</b> - Stream Control Transmission Protocol</li><li><b>SNI</b> - Server Name Indication</li><li><b>SPN</b> - Service Principal Name</li></ol></p>",
        "image": ""
      },
      {
        "text": "<p><b>U - Z</b></p><p><ol><li><b>UAA</b> - User Account and Authentication</li><li><b>UPN</b> - User Principal Name</li><li><b>VPC</b> - Virtual Private Cloud. A virtual private cloud is an on-demand configurable pool of shared computing resources allocated within a public cloud environment, providing a certain level of isolation between the different organizations using the resources.</li><li><b>WAF</b> - Web Application Firewall</li><li><b>WAP</b> - Web Application Proxy</li><li><b>WID</b> - Windows Internal Database</li></ol></p>",
        "image": ""
      }
    ]
  }
]