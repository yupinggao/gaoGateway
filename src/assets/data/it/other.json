[
  {
    "id": 5,
    "date": "2019/01/15",
    "title": "NodeJS",
    "itemList": [
      {
        "text": "<p>Node.js is an open source javascript server environment. Node.js runs single-threaded, non-blocking, asynchronously programming, which is very memory efficient.</p>",
        "image": ""
      },
      {
        "text": "<p>Node.js can do the following: <ul><li>Generate dynamic page content</li><li>Create, open, read, write, delete, and close files on the server</li><li>Collect form data</li><li>Add, delete, modify data in your database</li><li>Create REST APIs</li><li>Consume REST APIs</li></ul></p>",
        "image": ""
      },
      {
        "text": "<b>URL Module:</b><br/><p><code>var url = require('url');</code><br/><code>var adr = 'http://localhost:8080/default.htm?year=2017&month=february';</code><br/><code>var q = url.parse(adr, true);</code><br/><code>console.log(q.host); //returns 'localhost:8080'</code><br/><code>console.log(q.pathname); //returns '/default.htm'</code><br/><code>console.log(q.search); //returns '?year=2017&month=february'</code><br/><code>var qdata = q.query; //returns an object: { year: 2017, month: 'february' }</code><br/><code>console.log(qdata.month); //returns 'february'</code></p>",
        "image": ""
      },
      {
        "text": "<b>Somethings to remember:</b><br/><p><ul><li>node.js uses unlink to delete a file <code>fs.unlink(filename, function (err) {... ...})</code></li><li>node.js uses formidable mudule for uploading files: <code>var formidable = require('formidable');</code></li><li>node.js uses nodemailer to handle emails: <code>var nodemailer = require('nodemailer');</code></li></ul></p>",
        "image": ""
      }
    ]
  },
  {
    "id": 30,
    "date": "2019/01/16",
    "title": "JavaScript 6/ECMAScript 6",
    "itemList": [
      {
        "text": "<p>JavaScript 6 or ECMAScript 6 (ECMA stands for European Computer Manufacturers Association) has some new features:<ul><li><code>let</code> statement allows you to declare a variable with block scope.</li><li><code>const</code> statement allows you to declare a constant.</li><li><code>exponentiation</code> operator (**) raises the first operand to the power of the second operand.</li><li>ES6 allows function parameters to have default values.</li><li><code>find()</code> method returns the value of the first array element that passes a test function.<br/><code>var numbers = [4, 9, 16, 25, 29];</code><br/><code>var first = numbers.find(myFunction);</code><br/><code>function myFunction(value, index, array) {</code><br/><code>&nbsp;&nbsp;&nbsp;return value > 18;</code><br/><code>}</code><br/></li><li><code>findIndex()</code> method returns the index of the first array element that passes a test function.</li><li>Arrow Functions (Lambda expression like function)</li></lu></p>",
        "image": ""
      }
    ]
  },
  {
    "id": 40,
    "date": "2019/01/24",
    "title": "CSS",
    "itemList": [
      {
        "text": "<p>The !important directive affects the way in which your CSS cascades while following the rules you feel are most crucial and should be applied. A rule that has the !important directive is always applied no matter where that rule appears in the CSS document.</p><p>To make the paragraph text always red, from the above example, you will use:<br/><code>p { color: red !important; }<br/>p { color: black; }</code></p>",
        "image": ""
      }
    ]
  },
  {
    "id": 50,
    "date": "2019/01/26",
    "title": "Angular",
    "itemList": [
      {
        "text": "<b>Angular Component Lifecycle Hooks</b><p>Angular creates a component, renders it, creates and renders its children, checks it when its data-bound properties change, and destroys it before removing it from the DOM. Angular offers lifecycle hooks that provide visibility into these key life moments and the ability to act when they occur. A directive has the same set of lifecycle hooks.</p><p>Directive and component instances have a lifecycle as Angular creates, updates, and destroys them. Developers can tap into key moments in that lifecycle by implementing one or more of the lifecycle hook interfaces in the Angular core library. Each interface has a single hook method whose name is the interface name prefixed with ng. For example, the OnInit interface has a hook method named ngOnInit() that Angular calls shortly after creating the component. The following table lists the Lifecycle Method:</p>",
        "image": "../assets/image/it/other/angularLifeCycle.png"
      },
      {
        "text": "<b>Angular Directives</b><p>There are three kinds of directives in Angular:<ol><li>Components—directives with a template</li><li>Structural directives—change the DOM layout by adding and removing DOM elements. Two examples are NgFor and NgIf.</li><li>Attribute directives—change the appearance or behavior of an element, component, or another directive. The built-in NgStyle directive in the Template Syntax guide, for example, can change several element styles at the same time.</li></ol></p>",
        "image": ""
      },
      {
        "text": "<b>Angular Decorators</b><p>There are four types of decorators in Angular:<ol><li>Class decorators, e.g. @Component and @NgModule</li><li>Property decorators for properties inside classes, e.g. @Input and @Output</li><li>Method decorators for methods inside classes, e.g. @HostListener</li><li>Parameter decorators for parameters inside class constructors, e.g. @Inject</li></ol></p>",
        "image": ""
      }
    ]
  },
  {
    "id": 60,
    "date": "2019/01/26",
    "title": "New Features in Angular 6",
    "itemList": [
      {
        "text": "<p>Angular has come out with some amazing new features in version 6.0.0, especially in Angular-cli. Now, with Angular 6, you can easily update your old packages, create native web elements using Angular Elements, and many other things.</p>",
        "image": ""
      },
      {
        "text": "<b>ng add</b><p>ng add is a new command in Angular-cli that helps you install and download new packages in your angular apps. It works the same as npm, but it doesn’t replace it.<div class='jumbotron'>ng add @angular/elements</div></p>",
        "image": ""
      },
      {
        "text": "<b>ng update</b><p>ng update is a new Angular-cli command too. It’s used to update and upgrade your packages. It’s really helpful, for example, when you want to upgrade from Angular 5 to Angular 6, or any other package in your Angular app. <div class='jumbotron'>ng update @angular/core</div></p>",
        "image": ""
      },
      {
        "text": "<b>Declaring the providers inside the service itself</b><p>Before this update, you had to the declare the providers array in app.module.ts</p><p>Now with Angular 6, you can provide your service inside the supervisor itself by putting the providedIn:root property within the '@injectable' decorator. <div class='jumbotron'>import { Injectable } from '@angular/core'<br/><br/>@Injectable({<br/>&nbsp;&nbsp;&nbsp;&nbsp;providedIn: 'root'<br/>})</div></p>",
        "image": ""
      },
      {
        "text": "<b>Use ng-template instead of template directive</b><p>You can use ng-template to render the HTML instead of the template tag in the new version of Angular. ng-template is an Angular element, and it works when it is used with a structural directive such as *ngFor and *ngIf.</p>",
        "image": ""
      },
      {
        "text": "<b>Angular elements</b><p>Angular 6 introduced us to Angular elements. You’re able to render your Angular elements as native web elements, and they’re interpreted as trusted HTML elements.</p>",
        "image": ""
      },
      {
        "text": "<b>Upgrading to RxJS 6.0.0</b><p>Angular 6 uses the latest version of Rxjs library. Now you can enjoy the newest features of RxJS 6 in your Angular app.</p>",
        "image": ""
      }
    ]
  },
  {
    "id": 70,
    "date": "2019/01/26",
    "title": "JQuery",
    "itemList": [
      {
        "text": "<p>jQuery is a JavaScript Library. The jQuery library contains the following features:</p><ul><li>HTML/DOM manipulation</li><li>CSS manipulation</li><li>HTML event methods</li><li>Effects and animations</li><li>AJAX</li><li>Utilities</li></ul>",
        "image": ""
      },
      {
        "text": "<b>jQuery Syntax</b><p>The jQuery syntax is tailor-made for selecting HTML elements and performing some action on the element(s). Basic syntax is: <code>$(selector).action()</code><ol><li>A $ sign to define/access jQuery</li><li>A (selector) to 'query (or find)' HTML elements</li><li>A jQuery action() to be performed on the element(s)</li></ol></p>",
        "image": ""
      },
      {
        "text": "<b>Examples:</b><ol><li><code>$(this).hide()</code> - hides the current element.</li><li><code>$('p').hide()</code> - hides all 'p' elements</li><li><code>$('.test').hide()</code> - hides all elements with class='test'.</li><li><code>$('#test').hide()</code> - hides the element with id='test'.</li></ol></p>",
        "image": ""
      }
    ]
  }
]