[
  {
    "id": 100,
    "date": "2018/12/30",
    "title": "GIT",
    "itemList": [
      {
        "text": "Git is a version-control system for tracking changes in computer files and coordinating work on those files among multiple people. It is primarily used for source-code management in software development, but it can be used to keep track of changes in any set of files. As a distributed revision-control system, it is aimed at speed, data integrity, and support for distributed, non-linear workflows.",
        "image": ""
      },
      {
        "text": "To check if the git is installed, type <mark>git --version</mark> in a terminal",
        "image": ""
      },
      {
        "text": "<b>Some GIT Commands</b> <p><mark>git config --global user.email 'email@example.com': </mark>Set the email address in GIT</p><p><mark>git config --list: </mark>show the global config in GIT</p><p><mark>git add: </mark>Add one or more files to staging (index).<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;To add one file: git add <i>filename</i><br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;To stage all changes: git add -A<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;To stage modifications and deletions, without new files: git add -u<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;To add all new and modified files (without deletion, not including files/folders listed in .gitignore): git add .</p> <p><mark>git commit: </mark>Commit changes.<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Commit changes to head (but not yet to the remote repository): git commit -m 'Commit message'<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Commit any files you've added with git add, and also commit any files you've changed since then: git commit -a</p> <p><mark>git config: </mark>Configure the author name and email address to be used with your commits. Note that Git strips some characters (for example trailing periods) from user.name.</p> <p><mark>git clone: </mark>Check out a repository.<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;To ceate a working copy of a local repository: git clone /path/to/repository<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;For a remote server, use: git clone username@host:/path/to/repository</p> <p><mark>git init: </mark>Create a new local repository.</p> <p><mark>git push origin master: </mark>Send changes to the master branch of your remote repository.</p> <p><mark>git status: </mark>List the files you've changed and those you still need to add or commit.</p> <p><mark>git remote add origin <server>: </mark>If you haven't connected your local repository to a remote server, add the server to be able to push to it.<p> <p>For more GIT commands, please visit the following link: <a href='https://git-scm.com/docs' target='_blank'>List Of GIT Commands</a></p>",
        "image": ""
      }
    ]
  },
  {
    "id": 200,
    "date": "2020/07/18",
    "title": "GITLab",
    "itemList": [
      {
        "text": "GitLab is a web-based DevOps lifecycle tool that provides a Git-repository manager providing wiki, issue-tracking and continuous integration/continuous deployment pipeline features, using an open-source license, developed by GitLab Inc.",
        "image": ""
      },
      {
        "text": "<p><b>GitLab Runner</b><br><br>GitLab Runner is the open source project that is used to run your jobs and send the results back to GitLab. It is used in conjunction with GitLab CI/CD, the open-source continuous integration service included with GitLab that coordinates the jobs.</p>",
        "image": ""
      }
    ]
  },
  {
    "id": 400,
    "date": "2020/01/05",
    "title": "Maven",
    "itemList": [
      {
        "text": "<b>Maven Build Lifecycle</b> <p><ul><li>Validate</li><li>Compile</li><li>Test</li><li>Package</li><li>Verify</li><li>Install</li><li>Deploy</li></ul></p>",
        "image": ""
      }
    ]
  },
  {
    "id": 500,
    "date": "2019/03/02",
    "title": "Gradle",
    "itemList": [
      {
        "text": "<b>Some Gradle Commands</b> <p><ul><li><mark>gradlew init: </mark>command to generate a simple project</li><li><mark>gradlew tasks: </mark>lists Gradle tasks that you can invoke, including those added by the base plugin, and custom tasks as well</li><li><mark>gradlew properties: </mark>tells you about a project’s attributes</li><li><mark>gradle wrapper: </mark>generates the necessary Wrapper files in the project directory. The recommended way to execute any Gradle build is with the help of the Gradle Wrapper (in short just “Wrapper”). The Wrapper is a script that invokes a declared version of Gradle, downloading it beforehand if necessary. As a result, developers can get up and running with a Gradle project quickly without having to follow manual installation processes saving your company time and money.</li><li><mark>gradle -q xxx:</mark> the flag -q suppresses Gradle's log messages.</li></ul></p>",
        "image": ""
      },
      {
        "text": "<b>Some Gradle Task Examples</b> <p><ul><li>task copy(type: Copy, group: 'Custom', description: 'Copies sources to the dest directory') {<br/>&emsp;&emsp;from 'src'<br/>&emsp;&emsp;into 'dest'<br/>}</li><li>task zip(type: Zip, group: 'Archive', description: 'Archives sources in a zip file') {<br/>&emsp;&emsp;from 'src'<br/>&emsp;&emsp;setArchiveName 'basic-demo-1.0.zip'<br/>}</li></ul></p>",
        "image": ""
      },
      {
        "text": "<b>Dependency management</b> <p><ul><li><b>compile(Deprecated): </b>Compile time dependencies. Superseded by implementation</li><li><b>implementation extends compile: </b>Implementation only dependencies</li><li><b>compileOnly: </b>Compile time only dependencies, not used at runtime</li><li><b>compileClasspath extends compile, compileOnly, implementation: </b>Compile classpath, used when compiling source. Used by task compileJava</li><li><b>annotationProcessor: </b>Annotation processors used during compilation</li><li><b>runtime(Deprecated) extends compile: </b>Runtime dependencies. Superseded by runtimeOnly</li><li><b>runtimeOnly: </b>Runtime only dependencies</li><li><b>runtimeClasspath extends runtimeOnly, runtime, implementation: </b>Runtime classpath contains elements of the implementation, as well as runtime only elements</li><li><b>testCompile(Deprecated) extends compile: </b>Additional dependencies for compiling tests. Superseded by testImplementation</li><li><b>testImplementation extends testCompile, implementation: </b>Implementation only dependencies for tests</li><li><b>testCompileOnly: </b>Additional dependencies only for compiling tests, not used at runtime</li><li><b>testCompileClasspath extends testCompile, testCompileOnly, testImplementation: </b>Test compile classpath, used when compiling test sources. Used by task compileTestJava</li><li><b>testRuntime(Deprecated) extends runtime, testCompile: </b>Additional dependencies for running tests only. Superseded by testRuntimeOnly</li><li><b>testRuntimeOnly extends runtimeOnly: </b>Runtime only dependencies for running tests</li><li><b>testRuntimeClasspath extends testRuntimeOnly, testRuntime, testImplementation: </b>Runtime classpath for running tests. Used by task test</li><li><b>archives: </b>Artifacts (e.g. jars) produced by this project. Used by task uploadArchives</li><li><b>default extends runtime: </b>The default configuration used by a project dependency on this project. Contains the artifacts and dependencies required by this project at runtime</li></ul></p>",
        "image": ""
      }
    ]
  },
  {
    "id": 600,
    "date": "2019/03/03",
    "title": "Gretty",
    "itemList": [
      {
        "text": "<b>Gretty: </b> Gretty is a feature-rich gradle plugin for running web-apps on embedded servlet containers. It supports Jetty versions 7, 8 and 9, Tomcat versions 7 and 8, multiple web-apps and many more. It wraps servlet container functions as convenient Gradle tasks and configuration DSL. Gretty supports web-apps of various types: gradle projects, WAR-files in the file system and even WAR-files from maven dependencies. The central concept of Multiple web-apps feature is farm - a collection of web-apps, that should run together. There are two ways to define and use farms: <ul><li>Default farm is automatically created for you by Gretty. You may add artbitrary web-apps to it and then invoke farm-specific tasks: farmRun, farmRunDebug, etc. Note that farm-specific tasks are not using gretty tasks (appRun, appRunDebug, etc.).</li><li>Named farms, which you create yourself in gradle script. You can add as many named farms as you want, and you can add web-apps to farms in arbitrary constellations. Each named farm provides a specific set of farm tasks. For example, if you define farm with name 'XYZ', there will be new tasks farmRunXYZ, farmRunDebugXYZ, etc. available.</li></ul>",
        "image": ""
      },
      {
        "text": "<b>Some Gretty Task Examples</b> <p><ul><li><mark>appRun task: </mark>appRun task starts web-app inplace, in interactive mode.<br/>Effects:<ol><li>The web-app gets compiled (if it’s not up-to-date).</li><li>Embedded servlet-container starts in separate java process against compiled classes and their dependencies and listens for HTTP-requests on port (default 8080).</li><li>Gretty waits for the user keypress.</li><li>When user presses any key (in the same terminal), servlet-container process shuts down.</li><li>Gretty waits for servlet-container process to complete.</li><li>Gradle script continues normal execution of tasks.</li></ol></li></ul></p>",
        "image": ""
      }
    ]
  },
  {
    "id": 700,
    "date": "2019/01/10",
    "title": "Unix/Linux and Commands",
    "itemList": [
      {
        "text": "<p>An OS is made of many components, but its two prime components are</p><ul><li>Kernel</li><li>shell</li></ul>",
        "image": "../assets/image/it/tool/os.png"
      },
      {
        "text": "<p>Two main shells in Linux</p><ul><li>Bourne Shell<ul><li>POSIX shell also is known as sh</li><li>Korn Shell also knew as ksh</li><li>Bourne Again SHell also knew as bash (most popular)</li></ul></li><li>C Shell<ul><li>C shell also is known as csh</li><li>Tops C shell also is known as tcsh</li></ul></li></ul>",
        "image": ""
      },
      {
        "text": "<p><b>Commands: </b><br><b>A - N</b></p><ul><li><b>chmod: </b>lets you change the read, write, and execute permissions on your files</li><li><b>find: </b>Find files</li><li><b>grep: </b>Search text for a pattern</li><li><b>grep -r '192.168.1.5' /etc/: </b>search recursively i.e. read all files under each directory for a string '192.168.1.5'</li><li><code>lsof -i :30400</code> - check if there’s any process currently using this port</li><li><b>nslookup <i>dns server name or ip</i>: </b>look for DNS server information</li><li><b>netstat --listen or netstat -l: </b>to find open ports</li><li><b>Nohup: </b>stands for no hang up. Nohup is very helpful when you have to execute a shell-script or command that take a long time to finish. In that case, you don't want to be connected to the shell and waiting for the command to complete.</li><li><b>NUMA: </b>Non-uniform memory access.</li></ul>",
        "image": ""
      },
      {
        "text": "<p><b>O - Z</b></p><ul><li><b>passwd: </b>change password</li><li><b>printenv: </b>print environment variables</li><li><b>ps: </b>Report process status</li><li><b>ps auxw | grep kube-proxy: </b>check if kube-proxy is running on your Nodes</li><li><b>ps -ef | grep {userName}: </b>display user ID associated with a process</li><li><b>ps -u yourusername: </b>lists the user's processes</li><li><b>pwd: </b>tells you where you currently are</li><li><b>sh -c 'echo This is a test string': </b>the -c argument tells the shell to read commands from the command_string operand instead of from the standard input</li><li><b>who: </b>tells you who's logged on, and where they're coming from</li><li><b>whoami: </b>returns your username</li><li><b>sysctl -a: </b>to get a list of all kernel parameters at runtime.</li></ul>",
        "image": ""
      },
      {
        "text": "<p>Find OS: <code>cat /etc/os-release</code></p><p>find kernel version: <code>uname -r</code></p>",
        "image": ""
      },
      {
        "text": "<p>Delete all including the folder: <code>rm -R</code> <i>folder name</i></p></p>",
        "image": ""
      }
    ]
  },
  {
    "id": 720,
    "date": "2020/01/06",
    "title": "Bourne Again Shell - bash",
    "itemList": [
      {
        "text": "<p>Begine with: <code>#! /bin/sh</code><br>To execute, type: <code>bash <i>filename.sh</i></code><br>Comment: <code>#anyComments</code></p>",
        "image": ""
      },
      {
        "text": "<p><b>Shell Variables: </b><ul><li><code>variable ='Hello'</code></li><li><code>echo $variable</code></li><li><code>echo 'what is your name?'</code></li><li><code>read name</code></li><li><code>echo 'How do you do, $name?'</code></li></ul></p>",
        "image": ""
      }
    ]
  },
  {
    "id": 740,
    "date": "2020/01/21",
    "title": "Powershell",
    "itemList": [
      {
        "text": "<p>Power shell is an extendable command shell and a scripting language for Windows. PowerShell is object-based and not text based. Commands in PowerShell are customizable. It is a command line interpreter and scripting environment</p>",
        "image": ""
      }
    ]
  }
]