[
  {
    "id": 100,
    "date": "2018/12/20",
    "title": "DevOps",
    "itemList": [
      {
        "text": "<p>DevOps is a software development methodology that combines software development (Dev) with information technology operations (Ops). The goal of DevOps is to shorten the systems development life cycle.</p><p>The concept of DevOps is founded on building a culture of collaboration between teams that historically functioned in relatively isolated silos. The promised benefits include increased trust, faster software releases, and ability to solve critical issues quickly, and better manage unplanned work.</p><p>The goal of DevOps is to shorten the systems development life cycle. It unites agile, continuous delivery, automation, and much more, to help development and operations teams be more efficient, innovate faster, and deliver higher value to businesses and customers.</p>",
        "image": ""
      },
      {
        "text": "<p><b>DevOps Tools</b><p><ul><li><a href='it/tool/10'>Jenkins</a></li><li><a href='/it/cloud/10'>Docker</a></li><li><a href='it/tool/5'>Git (GitHub)</a></li><li>Copado</li><li>Chef</li><li>Puppet</li><li>Ansible</li><li>SaltStack</li></ul></p>",
        "image": ""
      }
    ]
  },
  {
    "id": 200,
    "date": "2018/12/20",
    "title": "Microservices",
    "itemList": [
      {
        "text": "<p>Microservices are a software development technique—a variant of the service-oriented architecture (SOA) architectural style that structures an application as a collection of loosely coupled services.</p><p>In a microservices architecture, services are: <ul><li>Fine-grained</li><li>lightweight</li><li>Highly maintainable</li><li>Highly testable</li><li>Loosely coupled</li><li>Independently deployable</li><li>Organized around business capabilities</li></ul><p>      ",
        "image": ""
      },
      {
        "text": "<b>Differences between Microservices and SOA</b><br/><br/><div class='container'><table class='table-bordered'><thead><tr><th>Microservices</th><th>SOA</th></tr></thead><tbody><tr><td>Built on the idea of “share-as-little-as-possible” architecture approach</td><td>Built on the idea of “share-as-much-as-possible” architecture approach</td></tr><tr><td>Relaxed governance, with more focus on people collaboration and freedom of choice</td><td>Common governance and standards</td></tr><tr><td>Uses less elaborate and simple messaging system</td><td>Uses enterprise service bus (ESB) for communication</td></tr><tr><td>Uses lightweight protocols such as HTTP/REST & AMQP</td><td>Supports multiple message protocols</td></tr><tr><td>Application Servers not really used. Platforms such as Node.JS could be used</td><td>Common platform for all services deployed to application servers</td></tr><tr><td>Single-threaded usually with use of Event Loop features for non-locking I/O handling</td><td>Multi-threaded with more overheads to handle I/O</td></tr><tr><td>Uses modern, non-relational databases</td><td>Uses traditional relational databases more often</td></tr><tr><td>A systematic change is to create a new service</td><td>A systematic change requires modifying the monolith</td></tr><tr><td>Strong focus on DevOps / Continuous Delivery</td><td>DevOps / Continuous Delivery is becoming popular, but not yet mainstream</td></tr></tbody></table></div>",
        "image": ""
      },
      {
        "text": "<b>Disadvantages of Microservices</b><p><ul><li>Developing distributed systems can be complex.<li>Multiple databases and transaction management can be painful.</li></ul><p>",
        "image": ""
      },
      {
        "text": "<b>Azure Microservices Architecture</b>",
        "image": "../assets/image/it/trend/azureMicroServices.png"
      },
      {
        "text": "<b>Microservices Design Patterns</b>",
        "image": "../assets/image/it/trend/microservicePatterns.png"
      },
      {
        "text": "<b>K8s Design Patterns</b>",
        "image": "../assets/image/it/trend/k8sPatterns.PNG"
      }
    ]
  },
  {
    "id": 300,
    "date": "2020/02/08",
    "title": "Domain-Driven Design (DDD)",
    "itemList": [
      {
        "text": "<p>Tackling Complexity in the Heart of Software, domain-driven design is the expansion upon and application of the domainconcept, as it applies to the development of software. It aims to ease the creation of complex applications by connecting the related pieces of the software into an ever-evolving model. DDD focuses on three core principles: </p><p><ul><li>Focus on the core domain and domain logic.</li><li>Base complex designs on models of the domain.</li><li>Constantly collaborate with domain experts, in order to improve the application model and resolve any emerging domain-related issues.</li></p></p>",
        "image": ""
      },
      {
        "text": "<p>Domain-Driven Design further defines a few common terms that are useful when describing and discussing DDD practices: <p><p><ul><li><b>Context:</b> The setting in which a word or statement appears that determines its meaning. Statements about a model can only be understood in a context.</li><li><b>Model:</b> A system of abstractions that describes selected aspects of a domain and can be used to solve problems related to that domain.</li><li><b>Ubiquitous Language:</b> A language structured around the domain model and used by all team members to connect all the activities of the team with the software.</li><li><b>Bounded Context:</b> A description of a boundary (typically a subsystem, or the work of a specific team) within which a particular model is defined and applicable.</li></p></p>",
        "image": ""
      },
      {
        "text": "<p>Domain-driven design also defines a number of high-level concepts that can be used in conjunction with one another to create and modify domain models: </p><p><ul><li><b>Entity:</b> An object that is identified by its consistent thread of continuity, as opposed to traditional objects, which are defined by their attributes.</li><li><b>Value Object:</b> An immutable (unchangeable) object that has attributes, but no distinct identity.</li><li><b>Domain Event:</b> An object that is used to record a discrete event related to model activity within the system. While all events within the system could be tracked, a domain event is only created for event types which the domain experts care about.</li><li><b>Aggregate:</b> A cluster of entities and value objects with defined boundaries around the group. Rather than allowing every single entity or value object to perform all actions on its own, the collective aggregate of items is assigned a singular aggregate root item. Now, external objects no longer have direct access to every individual entity or value object within the aggregate, but instead only have access to the single aggregate root item, and use that to pass along instructions to the group as a whole. This practice correlates with many of the actual coding practices we’re covering in our design patterns series.</li><li><b>Service:</b> Essentially, a service is an operation or form of business logic that doesn’t naturally fit within the realm of objects. In other words, if some functionality must exist, but it cannot be related to an entity or value object, it’s probably a service.</li><li><b>Repositories:</b> Not be confused with common version control repositories, the DDD meaning of a repository is a service that uses a global interface to provide access to all entities and value objects that are within a particular aggregate collection. Methods should be defined to allow for creation, modification, and deletion of objects within the aggregate. However, by using this repository service to make data queries, the goal is to remove such data query capabilities from within the business logic of object models.</li><li><b>Factories:</b> As we’ve discussed through a number of design patterns articles already, DDD suggests the use of a factory, which encapsulates the logic of creating complex objects and aggregates, ensuring that the client has no knowledge of the inner-workings of object manipulation.</li></p><p>Domain-driven design also heavily emphasizes the ever-more-popular practice of continuous integration, which asks the entire development team to use one shared code repository and push commits to it daily (if not multiple times a day). An automatic process executes at the end of the work day, which checks the integrity of the entire code base, running automated unit tests, regression tests, and the like, to quickly detect any potential problems that may have been introduced in the latest commits.</p></p>",
        "image": ""
      },
      {
        "text": "<p><b>Advantages of Domain-Driven Design</b></p><p><ul><li><b>Eases Communication:</b> With an early emphasis on establishing a common and ubiquitous language related to the domain model of the project, teams will often find communication throughout the entire development life cycle to be much easier. Typically, DDD will require less technical jargon when discussing aspects of the application, since the ubiquitous language established early on will likely define simpler terms to refer to those more technical aspects.</li><li><b>Improves Flexibility:</b> Since DDD is so heavily based around the concepts of object-oriented analysis and design, nearly everything within the domain model will be based on an object and will, therefore, be quite modular and encapsulated. This allows for various components, or even the entire system as a whole, to be altered and improved on a regular, continuous basis.</li><li><b>Emphasizes Domain Over Interface:</b> Since DDD is the practice of building around the concepts of domain and what the domain experts within the project advise, DDD will often produce applications that are accurately suited for and representative of the domain at hand, as opposed to those applications which emphasize the UI/UX first and foremost. While an obvious balance is required, the focus on domain means that a DDD approach can produce a product that resonates well with the audience associated with that domain.</li></ul></p></p>",
        "image": ""
      },
      {
        "text": "<p><b>Disadvantages of Domain-Driven Design</b></p><p><ul><li><b>Requires Robust Domain Expertise:</b> While many would consider this an advantage, it cannot be denied that DDDpractices strongly rely on constant iteration and continuous integration in order to build a malleable project that can adjust itself when necessary. Some organizations may have trouble with these practices, particularly if their past experience is largely tied to less-flexible development models, such as the waterfall model or the like.</li><li><b>Encourages Iterative Practices: </b>While many would consider this an advantage, it cannot be denied that DDDpractices strongly rely on constant iteration and continuous integration in order to build a malleable project that can adjust itself when necessary. Some organizations may have trouble with these practices, particularly if their past experience is largely tied to less-flexible development models, such as the waterfall model or the like.</li><li><b>Ill-Suited for Highly Technical Projects: </b>While DDD is great for applications where there is a great deal of domain complexity (where business logic is rather complex and convoluted), DDD is not very well-suited for applications that have marginal domain complexity, but conversely have a great deal of technical complexity. Since DDD so heavily emphasizes the need for (and importance of) domain experts to generate the proper ubiquitous language and then domain model on which the project is based, a project that is incredibly technically complex may be challenging for domain experts to grasp, causing problems down the line, perhaps when technical requirements or limitations were not fully understood by all members of the team.</li></ul></p></p>",
        "image": ""
      }
    ]
  }
]