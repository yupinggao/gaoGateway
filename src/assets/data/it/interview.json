[
  {
    "id": 5,
    "date": "2018/12/20",
    "title": "Docker",
    "itemList": [
      {
        "text": "<ol><li><b>What is Docker? </b>Docker is a containerization platform which packages your application and all its dependencies together in the form of containers so as to ensure that your application works seamlessly in any environment.</li><li><b>What is Docker container? </b>A container is a standard unit of software that packages up code and all its dependencies so the application runs quickly and reliably from one computing environment to another.</li><li><b>What is Docker Container Image? </b>A Docker container image is a lightweight, standalone, executable package of software that includes everything needed to run an application: code, runtime, system tools, system libraries and settings.</li><li><b>What is Docker hub? </b>Docker hub is a cloud-based registry service which allows you to link to code repositories, build your images and test them, stores manually pushed images, and links to Docker cloud so you can deploy images to your hosts. It provides a centralized resource for container image discovery, distribution and change management, user and team collaboration, and workflow automation throughout the development pipeline.</li><li><b>What is Docker Swarm? </b>Docker Swarm is native clustering for Docker. It turns a pool of Docker hosts into a single, virtual Docker host. Docker Swarm serves the standard Docker API, any tool that already communicates with a Docker daemon can use Swarm to transparently scale to multiple hosts. Docker Swarm includes the following tools:<ul><li>Dokku</li><li>Docker Compose</li><li>Docker Machine</li><li>Jenkins</li></ul></li><li><b>What is Dockerfile? </b>A Dockerfile is a text document that contains all the commands a user could call on the command line to assemble an image. Docker can build images automatically by reading the instructions from a Dockerfile.</li></ol>",
        "image": ""
      }
    ]
  },
  {
    "id": 10,
    "date": "2018/12/20",
    "title": "Kubernetes",
    "itemList": [
      {
        "text": "<ol><li><b>What is Kubernetes? </b>Kubernetes is a container orchestration tool that is used for automating the managing, monitoring, scaling and deploying of containerized applications. It creates groups of containers that can be logical discovered and managed for easy operations on containers.</li> <li><b>What are the Kubernetes Master components? </b>The components of the Kubernetes Master include the API server, the controller manager, Scheduler, and the etc components. The Kubernetes Master components are responsible for running and managing the Kubernetes cluster.</li> <li><b>What are the benefits of Kubernetes? </b>With container orchestration tool Kubernetes, it becomes extremely easy to handle the containers. You can respond to customer demands by deploying the applications faster and in a more predictable manner. <br/>Here we will list some of the benefits of Kubernetes:<ul><li>Automatic scheduling</li><li>Automated rollback</li><li>Horizontal scaling</li><li>Auto healing capabilities.</li></ul></li> <li><b>What is the difference between Kubernetes and Docker Swarm? </b>Docker Swarm is the default container orchestration tool that comes with Docker. Docker Swarm can only orchestrate simple Docker containers. Kubernetes on the other hand helps to manage much more complex software application containers. Kubernetes offers support for larger demand production environment.</li> <li><b>What is a Kubernetes namespace? </b>The Kubernetes namespace is used in the environment wherein you have multiple users spread in geographically vast areas and working on multiple projects. What the namespace does is divide the cluster resources between multiple users.</li> <li><b>What is a node in Kubernetes? </b>A node in Kubernetes is a worker machine which is also known as a minion. This node could be a physical machine or a virtual machine. For each of the node there is a service to run pods and it is managed by master components. The node services could include kubelet, kube-proxy and so on.</li> <li><b>What is a Pod in Kubernetes? </b>You can think of Kubernetes Pod as a group of containers that are run on the same host. So if you regularly deploy single containers then your container and Pod will be one and the same.</li> <li><b>What is a container cluster? </b>A container cluster lets you place and manage the containers in a dynamic setup. It can be considered as a set of nodes or Compute Engine instances. The API server of the Kubernetes does not run on cluster nodes but instead the Container Engine hosts the API server.</li> <li><b>What is a Heapster? </b>The Heapster lets you do the container cluster monitoring.It lets you do cluster-wide monitoring and event data aggregation. It has native support for Kubernetes.</li> <li><b>What is the Kubelet? </b>You can think of Kubelet as the lowest level component in a Kubernetes. The Kubelet is responsible for making the individual machines to run. The sole purpose of a Kubelet is given a set of containers, it has to ensure that they are all running.</li> <li><b>What is Minikube? </b>The Minikube makes it easy for the local running of Kubernetes. Within a Virtual Machine, the Minikube runs a single-node Kubernetes cluster.</li> <li><b>What is Kubectl? </b>The Kubectl is a Kubernetes command line tool that is used for deploying and managing applications on Kubernetes. The Kubectl is especially useful for inspecting the cluster resources, for creating, updating and deleting the components.</li> <li><b>What is Kube proxy? </b>The Kube proxy runs on each of the node. It can do simple tasks like TCP, UDP Forwarding and so on. It shows the services in the Kubernetes API on each node.</li> <li><b>What is the use of kube-controller-manager? </b>It is the Kubernetes controller manager. The kube-controller-manager is a daemon that embeds the core control loops which regulates system state and it is a non-terminating loop.</li> <li><b>What is load-balancing on Kubernetes? </b>The process of load-balancing will let you expose the services. There are two types of load-balancing when it comes to Kubernetes.<br/><mark>Internal load balancing:</mark> This is used for balancing the loads automatically and allocating the pods with the required configuration.<br/><mark>External load balancing:</mark> This directs the traffic from external loads to the backend pods.</li> <li><b>How to set a static IP for Kubernetes load balancer? </b>Kubernetes Master assigns a new IP address.</li></ol>",
        "image": ""
      }
    ]
  },
  {
    "id": 15,
    "date": "2018/12/28",
    "title": "Angular",
    "itemList": [
      {
        "text": "<ol><li><b>What are forRoot and forChild methods? </b><mark>forRoot</mark> is used when a module is 'eager', that is, it is not lazy-loaded (loads when the application starts). Angular creates a factory for all the modules, except for the lazy modules, which when loaded on demand, have their own factory. When we use forRoot(), we’re loading a provider that is going to be injected into the 'root' of the modules because it uses the same factory as our main module.<p><br/><mark>forChild</mark> is used the other way around: specifically when we want to deliver a provider that is visible only to the 'children' modules of our module, in case they are lazy loaded. As each lazy module is loaded on demand, it has its own injector.</p></li><li><b>What are the building blocks of Angular?</b><ul><li>Module</li><li>component</li><li>Template</li><li>Directives</li><li>Data Binding</li><li>Services</li><li>Dependency Injection</li><li>Routing</li></ul></li><li><b>What is Module?</b> Module in Angular refers to a place where you can group the components, directives, pipes, and services, which are related to the application.<br/><br/>To define module, we can use the NgModule. When you create a new project using the Angular –cli command, the ngmodule is created in the app.module.ts file by default.</li></ol>",
        "image": ""
      }
    ]
  }
]