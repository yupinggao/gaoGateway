[
  {
    "id": 10,
    "date": "2018/12/20",
    "title": "Docker",
    "itemList": [
      {
        "text": "<ol><li><b>What is Docker? </b>Docker is a containerization platform which packages your application and all its dependencies together in the form of containers so as to ensure that your application works seamlessly in any environment.</li><li><b>What is Docker container? </b>A container is a standard unit of software that packages up code and all its dependencies so the application runs quickly and reliably from one computing environment to another.</li><li><b>What is Docker Container Image? </b>A Docker container image is a lightweight, standalone, executable package of software that includes everything needed to run an application: code, runtime, system tools, system libraries and settings.</li><li><b>What is Docker hub? </b>Docker hub is a cloud-based registry service which allows you to link to code repositories, build your images and test them, stores manually pushed images, and links to Docker cloud so you can deploy images to your hosts. It provides a centralized resource for container image discovery, distribution and change management, user and team collaboration, and workflow automation throughout the development pipeline.</li><li><b>What is Docker Swarm? </b>Docker Swarm is native clustering for Docker. It turns a pool of Docker hosts into a single, virtual Docker host. Docker Swarm serves the standard Docker API, any tool that already communicates with a Docker daemon can use Swarm to transparently scale to multiple hosts. Docker Swarm includes the following tools:<ul><li>Dokku</li><li>Docker Compose</li><li>Docker Machine</li><li>Jenkins</li></ul></li><li><b>What is Dockerfile? </b>A Dockerfile is a text document that contains all the commands a user could call on the command line to assemble an image. Docker can build images automatically by reading the instructions from a Dockerfile.</li></ol>",
        "image": ""
      }
    ]
  },
  {
    "id": 20,
    "date": "2018/12/20",
    "title": "Kubernetes",
    "itemList": [
      {
        "text": "<ol><li><b>What is Kubernetes? </b>Kubernetes is a container orchestration tool that is used for automating the managing, monitoring, scaling and deploying of containerized applications. It creates groups of containers that can be logical discovered and managed for easy operations on containers.</li> <li><b>What are the Kubernetes Master components? </b>The components of the Kubernetes Master include the API server, the controller manager, Scheduler, and the etcd (key-value stores for cluster info) components. The Kubernetes Master components are responsible for running and managing the Kubernetes cluster.</li> <li><b>What are the benefits of Kubernetes? </b>With container orchestration tool Kubernetes, it becomes extremely easy to handle the containers. You can respond to customer demands by deploying the applications faster and in a more predictable manner. <br/>Here we will list some of the benefits of Kubernetes:<ul><li>Automatic scheduling</li><li>Automated rollback</li><li>Horizontal scaling</li><li>Auto healing capabilities.</li></ul></li> <li><b>What is the difference between Kubernetes and Docker Swarm? </b>Docker Swarm is the default container orchestration tool that comes with Docker. Docker Swarm can only orchestrate simple Docker containers. Kubernetes on the other hand helps to manage much more complex software application containers. Kubernetes offers support for larger demand production environment.</li> <li><b>What is a Kubernetes namespace? </b>The Kubernetes namespace is used in the environment wherein you have multiple users spread in geographically vast areas and working on multiple projects. What the namespace does is divide the cluster resources between multiple users.</li> <li><b>What is a node in Kubernetes? </b>A node in Kubernetes is a worker machine which is also known as a minion. This node could be a physical machine or a virtual machine. For each of the node there is a service to run pods and it is managed by master components. The node services could include kubelet, kube-proxy and so on.</li> <li><b>What is a Pod in Kubernetes? </b>You can think of Kubernetes Pod as a group of containers that are run on the same host. So if you regularly deploy single container then your container and Pod will be one and the same.</li> <li><b>What is a container cluster? </b>A container cluster lets you place and manage the containers in a dynamic setup. It can be considered as a set of nodes or Compute Engine instances. The API server of the Kubernetes does not run on cluster nodes but instead the Container Engine hosts the API server.</li> <li><b>What is a Heapster? </b>The Heapster lets you do the container cluster monitoring.It lets you do cluster-wide monitoring and event data aggregation. It has native support for Kubernetes. Heapster was replaced with the Kubernetes metrics server in version 1.11.</li> <li><b>What is the Kubelet? </b>You can think of Kubelet as the lowest level component in a Kubernetes. The Kubelet is responsible for making the individual machines to run. The sole purpose of a Kubelet is given a set of containers, it has to ensure that they are all running.</li> <li><b>What is Minikube? </b>The Minikube makes it easy for the local running of Kubernetes. Within a Virtual Machine, the Minikube runs a single-node Kubernetes cluster.</li> <li><b>What is Kubectl? </b>The Kubectl is a Kubernetes command line tool that is used for deploying and managing applications on Kubernetes. The Kubectl is especially useful for inspecting the cluster resources, for creating, updating and deleting the components.</li> <li><b>What is Kube proxy? </b>The Kube proxy runs on each of the node. It can do simple tasks like TCP, UDP Forwarding and so on. It shows the services in the Kubernetes API on each node.</li> <li><b>What is the use of kube-controller-manager? </b>The kube-controller-manager is a daemon that embeds the core control loops which regulates system state and it is a non-terminating loop.</li> <li><b>What is load-balancing on Kubernetes? </b>The process of load-balancing will let you expose the services. There are two types of load-balancing when it comes to Kubernetes.<br/><mark>Internal load balancing:</mark> This is used for balancing the loads automatically and allocating the pods with the required configuration.<br/><mark>External load balancing:</mark> This directs the traffic from external loads to the backend pods.</li> <li><b>How to set a static IP for Kubernetes load balancer? </b>Kubernetes Master assigns a new IP address.</li><li><b>ClusterIP vs NodePort vs LoadBalancer</b>?<ul><li>ClusterIP accesses the services through proxy. ClusterIP can access services only inside the cluster.</li><li>NodePort opens a specific port on each node of the cluster and traffic on that node is forwarded directly to the service.</li><li>LoadBalancer: All the traffic on the port is forwarded to the service, there's no filtering , no routing.</li></ul></li></ol>",
        "image": ""
      }
    ]
  },
  {
    "id": 30,
    "date": "2018/12/28",
    "title": "Angular",
    "itemList": [
      {
        "text": "<ol><li><b>What are forRoot and forChild methods?</b><p><mark>forRoot</mark> is used when a module is 'eager', that is, it is not lazy-loaded (loads when the application starts). Angular creates a factory for all the modules, except for the lazy modules, which when loaded on demand, have their own factory. When we use forRoot(), we’re loading a provider that is going to be injected into the 'root' of the modules because it uses the same factory as our main module.</p><p><mark>forChild</mark> is used the other way around: specifically when we want to deliver a provider that is visible only to the 'children' modules of our module, in case they are lazy loaded. As each lazy module is loaded on demand, it has its own injector.</p></li><li><b>What are the building blocks of Angular?</b><br/><ul><li>Module</li><li>component</li><li>Template</li><li>Directives</li><li>Data Binding</li><li>Services</li><li>Dependency Injection</li><li>Routing</li></ul></li><li><b>What is Module?</b><p>Module in Angular refers to a place where you can group the components, directives, pipes, and services, which are related to the application.</p><p>To define module, we can use the NgModule. When you create a new project using the Angular –cli command, the ngmodule is created in the app.module.ts file by default.</p></li><li><b>What is he difference between '==' and '===' operator?</b><br/>'==' checks type-converting equality, while '===' checks strict equality.</li><li><b>What tools are available for testing Angular applications? </b><br/><ul><li>Karma</li><li>Jasmine</li><li>angular-mocks</li></ul></li><li><b>What is Angular digest cycle? </b><br/>AngularJS digest cycle is the process behind Angular JS data binding.<br/>In each digest cycle, Angular compares the old and the new version of the scope model values. The digest cycle is triggered automatically. We can also use $apply() if we want to trigger the digest cycle manually.</li><li><b>What are differences between AngularJS and JavaScript Expressions? </b><br/><ul><li>AngularJS expressions can be written in HTML but JavaScript expressions are not.</li><li>AngularJS expressions do not support conditionals, loops, and exceptions, while JavaScript expressions do.</li><li>AngularJS expressions support filters, while JavaScript expressions do not.</li></ul></li><li><b>What is Angular’s prefixes $ and $$? </b>Angular uses these prefixes to prevent accidental code collision with users code. $ prefix is used with public objects whereas $$ prefix is used with a private object.</li><li><b>What are angular services? </b>Angular services are singleton objects which get instantiated only once during the lifetime of an application. They contain methods that maintain data throughout the life of an application, i.e. data does not get refreshed and is available all the time.</li><li><b>What are Angular build-in services? </b><ul><li>windows</li><li>document</li><li>http</li><li>location</li><li>timeout</li><li>log</li><li>parse</li><li>locale</li><li>interval</li><li>filter</li></ul></li><li><b>What are @Output and EventEmitter? </b>In Angular, <code>@Output</code> and <code>EventEmitter</code> can be used by a child component to emit an event and pass it to the parent component. Both are parts of the <code>@angular/core</code>.</li><li><b>What is @Input? </b> @input is used in child component to get the data from its parent component.</li><li><b>What are the differences between <code>@Inject()</code> and <code>@Injectable()</code>? </b><code>@Inject()</code> is a manual mechanism for letting Angular know that a parameter must be injected. It can be used like so:<br/><code>constructor(@Inject(ChatWidget) private chatWidget) { }</code><br/><br/><code>@Injectable()</code> lets Angular know that a class can be used with the dependency injector. <code>@Injectable()</code> is not strictly required if the class has other Angular decorators on it or does not have any dependencies. What is important is that any class that is going to be injected with Angular is decorated. However, best practice is to decorate injectables with <code>@Injectable()</code>, as it makes more sense to the reader.<br/></li></ol>",
        "image": ""
      }
    ]
  },
  {
    "id": 40,
    "date": "2019/12/2",
    "title": "React",
    "itemList": [
      {
        "text": "<b>What is React?</b><p><ol><li>React is a front-end JavaScript library developed by Facebook in 2011.</li><li>It follows the component based approach which helps in building reusable UI components.</li><li>It is used for developing complex and interactive web and mobile UI.</li><li>Even though it was open-sourced only in 2015, it has one of the largest communities supporting it.</li></ol></p>",
        "image": ""
      },
      {
        "text": "<b>Differentiate between Real DOM and Virtual DOM</b>",
        "image": "../assets/image/it/interview/realVSvirtualDOM.png"
      },
      {
        "text": "<b>What are the features of React?</b><p>Major features of React are listed below:<ol><li>It uses the virtual DOM instead of the real DOM.</li><li>It uses server-side rendering.</li><li>It follows uni-directional data flow or data binding.</li></ol></p>",
        "image": ""
      },
      {
        "text": "<b>Some of the major advantages of React</b><p>Major features of React are listed below:<ol><li>It increases the application’s performance</li><li>It can be conveniently used on the client as well as server side</li><li>Because of JSX, code’s readability increases</li><li>React is easy to integrate with other frameworks like Meteor, Angular, etc</li><li>Using React, writing UI test cases become extremely easy</li></ol></p>",
        "image": ""
      },
      {
        "text": "<b>Limitations of React</b><p><ol><li>React is just a library, not a full-blown framework</li><li>Its library is very large and takes time to understand</li><li>It can be little difficult for the novice programmers to understand</li><li>Coding gets complex as it uses inline templating and JSX</li></ol></p>",
        "image": ""
      },
      {
        "text": "<b>How is React different from Angular?</b>",
        "image": "../assets/image/it/interview/reactVSAngular.png"
      }
    ]
  },
  {
    "id": 50,
    "date": "2019/01/09",
    "title": "Python",
    "itemList": [
      {
        "text": "<ol><li><b>What is Python? What are the benefits of using Python? </b>Python is a programming language with objects, modules, threads, exceptions and automatic memory management. The benefits of pythons are that it is simple and easy, portable, extensible, build-in data structure and it is an open source.<p></p></li><li><b>How memory is managed in Python? </b><ul><li>Python memory is managed by Python private heap space. All Python objects and data structures are located in a private heap. The programmer does not have an access to this private heap and interpreter takes care of this Python private heap.</li><li>The allocation of Python heap space for Python objects is done by Python memory manager. The core API gives access to some tools for the programmer to code.</li><li>Python also have an inbuilt garbage collector, which recycle all the unused memory and frees the memory and makes it available to the heap space.</li></ul></li><li><b>Is Python case sensitive? </b>Yes</li><li><b>What is the difference between list and tuple? </b>The difference between list and tuple is that list is mutable while tuple is not. Tuple can be hashed for e.g as a key for dictionaries.</li><li><b>What is docstring in Python? </b>A Python documentation string is known as docstring (marked by starting three double quotes and ending three double quotes), it is a way of documenting Python functions, modules and classes.</li><li><b>What is negative index in Python? </b>Python sequences can be index in positive and negative numbers. For positive index, 0 is the first index, 1 is the second index and so forth. For negative index, (-1) is the last index and (-2) is the second last index and so forth.</li><li><b>What is module and package in Python? </b><p>In Python, module is the way to structure program. Each Python program file is a module, which imports other modules like objects and attributes.</p><p>The folder of Python program is a package of modules. A package can have modules or subfolders.</p></li><li><b>Explain how can you make a Python Script executable on Unix? </b>To make a Python Script executable on Unix, you need to do two things:<ul><li>Script file's mode must be executable</li><li>the first line must begin with # ( #!/usr/local/bin/python)</li></ul></li><li><b>Arguments passed by value or reference?</b> By reference.</li><li><b>Explain how to delete a file in Python? </b>By using a command os.remove (filename) or os.unlink(filename).</li><li><b>Mention some benefits of using Python? </b><ul><li>Python comprises of a huge standard library for most Internet platforms like Email, HTML, etc.</li><li>Python does not require explicit memory management as the interpreter itself allocates the memory to new variables and free them automatically</li><li>Provide easy readability due to use of square brackets</li><li>Having the built-in data types saves programming time and effort from declaring variables</li></ul></li><li><b>What is PIP? </b>PIP is a package management system used to install and manage software packages written in Python.</li><li><b>*args vs **kwargs in Python</b> The special syntax *args in function definitions in python is used to pass a variable number of arguments to a function. It is used to pass a non-keyworded, variable-length argument list.<br>The special syntax **kwargs in function definitions in python is used to pass a keyworded, variable-length argument list. We use the name kwargs with the double star. The reason is because the double star allows us to pass through keyword arguments (and any number of them).</li><li><b>How to Install MongoDB driver using PIP? </b>Open your command line terminal, and execute: <mark>python -m pip install pymongo</mark></li><li><b>How to create a Mongo DB in Python? </b><br/><div class='jumbotron'>import pymongo<br/>myclient = pymongo.MongoClient('mongodb://<i>hostname:portnamber</i>')<br/>mydb = myclient['mydatabase']</div></li></ol>",
        "image": ""
      }
    ]
  },
  {
    "id": 60,
    "date": "2019/01/09",
    "title": "What's new in HTML5",
    "itemList": [
      {
        "text": "<ol><li><b>Server-Sent Events: </b>A server-sent event is when a web page automatically gets updates from a server.</li><li><b>Web Worker: </b>A web worker is a JavaScript that runs in the background, independently of other scripts, without affecting the performance of the page. You can continue to do whatever you want: clicking, selecting things, etc., while the web worker runs in the background.</li><li>HTML5 offers new elements for better document structure:</li></ol>",
        "image": "../assets/image/it/interview/html5New.png"
      }
    ]
  },
  {
    "id": 70,
    "date": "2019/01/09",
    "title": "What's new in CSS3",
    "itemList": [
      {
        "text": "<ol><li><b>CSS3 Selectors: </b>Selectors are at the heart of CSS. Originally, CSS allowed the matching of elements by type, class, and/or ID. CSS2.1 added pseudo-elements, pseudo-classes, and combinators. With CSS3, we can target almost any element on the page with a wide range of selectors.</li><li><b>Multiple Background Images: </b>In CSS3, there’s no need to include an element for every background image; it provides us with the ability to add more than one background image to any element, even to pseudo-elements.</li><li><b>Text Shadow: </b>text-shadow adds shadows to individual characters in text nodes. Prior to CSS 3, this would be done by either using an image or duplicating a text element and then positioning it.</li><li><b>Linear Gradients: </b>W3C added the syntax for generating linear gradients with CSS3.</li></ol>",
        "image": "../assets/image/it/interview/linearGradient.png"
      }
    ]
  },
  {
    "id": 80,
    "date": "2019/01/09",
    "title": "BootStrap",
    "itemList": [
      {
        "text": "<ol><li><b>What is Bootstrap? </b>Bootstrap is an open source library of HTML, CSS, and JS for building responsive, mobile-first projects.</li><li><b>What is Flexbox? </b>Flexbox is a new layout mode of CSS3 which is officially called CSS Flexible Box Layout Module. The main advantage of this layout mode is that it makes the following layout tasks easier:<ul><li>alignment of items</li><li>specification of the layout direction</li><li>specification of layout order of items</li></ul>When defining a layout for dynamic or even unknown screen sizes the Flexbox layout mode is a powerful tool. You can apply Flexbox layout by using CSS properties defined by CSS3. Bootstrap 4 makes it even more easy by offering a set of ready made CSS classes for applying Flexbox layout to elements.</li><li><b>How to make responsive button size? </b>To use Bootstrap 4 media query mixins by including _variables.scss, _functions.scss, and mixins/_breakpoints.scss.</li></ol>",
        "image": ""
      }
    ]
  },
  {
    "id": 90,
    "date": "2019/01/09",
    "title": "JSON",
    "itemList": [
      {
        "text": "<ol><li><b>What are Valid JSON Types? </b><ul><li>string</li></li><li>number</li><li>embedded JSON object</li><li>array</li><li>boolean</li><li>null</li></ul></li><li><b>How to Convert image to JSON?</b><p>byte[] fileContent = FileUtils.readFileToByteArray(new File(filePath));<br>String encodedString = Base64.getEncoder().encodeToString(fileContent);</p></li><li><b>How to Convert JSON to image?</b><p>byte[] decodedBytes = Base64.getDecoder().decode(encodedString);<br>FileUtils.writeByteArrayToFile(new File(outputFileName), decodedBytes);</p></li></ol>",
        "image": ""
      }
    ]
  },
  {
    "id": 100,
    "date": "2019/01/10",
    "title": "Hibernate",
    "itemList": [
      {
        "text": "<ol><li><b>What is Join Fetch for: </b>A 'fetch' join allows associations or collections of values to be initialized along with their parent objects using a single select. This is particularly useful in the case of a collection. It effectively overrides the outer join and lazy declarations of the mapping file for associations and collections. this 'JOIN FETCH' will have it's effect if you have (fetch = FetchType.LAZY) property for a collection inside entity(example bellow).</li><li><b>load() vs get()</b><br/>session.load()<ul><li>It will always return a 'proxy' (Hibernate term) without hitting the database. In Hibernate, proxy is an object with the given identifier value, its properties are not initialized yet, it just look like a temporary fake object.</li><li>If no row found , it will throws an ObjectNotFoundException.</li></ul>session.get()<ul><li>It always hit the database and return the real object, an object that represent the database row, not proxy.</li><li>If no row found, it return null.</li></ul></li><li><b>save() vs persist()</b><br/>session.save()<ul><li>return type of save is Serializable object</li><li>save() method will assign the identifier value to the persistent instance immediately</li><li>save() method can be called outside of transaction boundary</li></ul>session.persist()<ul><li>return type of persist is void</li><li>persist() method doesn't guarantee that the identifier value will be assigned to the persistent instance immediately, the assignment might happen at flush time</li><li>persist() method will not run outside of transaction boundary</li></ul></li><li><b>First-level cache and Second-level cache:</b><br><p>The main difference between first level and second level cache in Hibernate is that the first level is maintained at the Session level and accessible only to the Session, while the second level cache is maintained at the SessionFactory level and available to all Sessions. This means, you can use the first level cache to store local data, i.e. the data which is needed by the Session, and you can use the second-level cache to store global data, i.e. something which can be shared across sessions.</p><p>The first level cache is by default enabled while the second level cache is by default disabled.<p>You can use Session.evict() to remove the loaded entity from the first level cache, can use refresh() method to refresh the cache and can use clear() method to remove all entities in cache.<p></li></ol>",
        "image": ""
      }
    ]
  },
  {
    "id": 110,
    "date": "2019/01/11",
    "title": "Typescript",
    "itemList": [
      {
        "text": "<ol><li><b>What is Typescript? </b>Typescript is a free and open-source programming language which is designed and developed by Microsoft. Typescript is a superset of JavaScript which primarily provides optional static typing, classes and interfaces. Typescript is compiled to provide clean and simple JavaScript code which runs on any browser. It allows JavaScript developers for using highly productive development tools and practices like static checking and code refactoring.</li><li><b>What are Differences between Typescript and JavaScript?: </b><ul><li>JavaScript don’t support Es6 while Typescript supports.</li><li>JavaScript build up reusable components by using functions and prototype-based inheritance while Typescript supports Classes that allow programmer to think in more object oriented way.</li><li>JavaScript don’t have any interfaces while Typescript has interfaces.</li><li>There is no static typing in JavaScript whereas there is static typing in Typescript.</li><li>JavaScript has no optional parameter  feature while Typescript has optional parameter feature.</li></ul><li><b>What are benefits of using Typescript?</b><ul><li>It provides the benefits of optional static typing. Here Typescript provides types that can be added to variables, functions, properties etc.</li><li>Typescript has the ability to compile down to a version of JavaScript that runs on all browsers.</li><li>Typescript is purely object oriented programming which means it is a programming paradigm based on the concepts of objects.</li><li>Most important advantage is it offers a “compiler” that can convert to JavaScript equivalent code. And it has a concept of namespace defined by a “module”.</li></ul></li><li><b>How Typescript classes are compiled to Javascript? </b>They are compiled into javascript functions and prototypes.</li><li><b>What are the built-in types in Typescript? </b><ul><li><b>Number type:</b> it is used to represent number type values and represents double precision floating point values.</li><li><b>String type:</b> it represents a sequence of characters stored as Unicode UTF-16 code. It is the same as JavaScript primitive type.</li><li><b>Boolean type:</b> in Typescript, it is used to represent a logical value. When we use the Boolean type, we get output only in true or false. It is also the same as JavaScript primitive type.</li><li><b>Null type:</b> it represents a null literal and it is not possible to directly reference the null type value itself.</li><li><b>Undefined type:</b> it is the type of undefined literal. This type of built-in type is the sub-type of all the types.</li></ul></li><li><b>What are some features of Typescript classes? </b>Typescript is a type of object-oriented JavaScript and supports object-oriented programming features like- classes, interfaces, etc. Here, a class in terms of object-oriented programming is a blueprint for creating objects. A class is used to encapsulate data for the object. A built-in support is provided by Typescript for this feature.<br/>Some features of a class are: <ul><li><b>Inheritance: </b>TypeScript supports the concept of Inheritance. Inheritance is the ability of a program to create new classes from an existing class. The class that is extended to create newer classes is called the parent class/super class. The newly created classes are called the child/sub classes. However, TypeScript doesn’t support multiple inheritance.</li><li><b>Encapsulation: </b>Creation of self-contained modules that bind processing functions to the data, takes place.</li><li><b>polymorphism: </b>TypeScript enables polymorphism via method overrides via the extend class or implemented interface.</li><li><b>Abstraction: </b>There is no formal mechanism for creating an abstract class in TypeScript, although a request to implement abstraction in TypeScript has been issued. For now we can use interfaces as a way to abstract class members.</li></ul></li></ol>",
        "image": ""
      }
    ]
  },
  {
    "id": 120,
    "date": "2019/01/13",
    "title": "Jenkins",
    "itemList": [
      {
        "text": "<ol><li><b>What is Jenkinsfile and what it does? </b>The definition of a Jenkins Pipeline is typically written into a text file called a Jenkinsfile which in turn is checked into a project’s source control repository.</li><li><b>Can you write a simple Jenkins Pipeline Code for Java? </b><p>Here is the simple Jenkins Pipeline Code for Java:</p><p style='text-align: justify;'>Jenkinsfile (Declarative Pipeline)<br />pipeline {<br />&nbsp; &nbsp; agent { docker &#39;maven:3.3.3&#39; }<br/>&nbsp; &nbsp; stages {<br />&nbsp; &nbsp; &nbsp; &nbsp; stage(&#39;build&#39;) {<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; steps {<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; sh &#39;mvn --version&#39;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br />&nbsp; &nbsp; &nbsp; &nbsp; }<br />&nbsp; &nbsp; }<br />}</p><a href='https://jenkins.io/doc/book/pipeline/syntax/' target='_blank'>Jenkin pipeline references could be found here</a></li><li><b>What is Declarative Pipeline in Jenkins? </b>Declarative Pipeline is a relatively recent addition to Jenkins Pipeline which presents a more simplified and opinionated syntax on top of the Pipeline sub-systems.<p>All valid Declarative Pipelines must be enclosed within a pipeline block, for example:</p><p style='text-align: justify;'>pipeline {<br />&nbsp; &nbsp; /* insert Declarative Pipeline here */<br />}</p></li><li><b>How will you secure Jenkins? </b><ol><li>Ensure global security is on.</li><li>Ensure that Jenkins is integrated with my company’s user directory with appropriate plugin.</li><li>Ensure that matrix/Project matrix is enabled to fine tune access.</li><li>Automate the process of setting rights/privileges in Jenkins with custom version controlled script.</li><li>Limit physical access to Jenkins data/folders.</li><li>Periodically run security audits on same.</li></ol></li><li><b>What are the various ways in which build can be scheduled in Jenkins? </b><ol><li>By source code management commits</li><li>After completion of other builds</li><li>Can be scheduled to run at specified time ( crons )</li><li>Manual Build Requests</li></ol></li></ol>",
        "image": ""
      }
    ]
  },
  {
    "id": 130,
    "date": "2019/01/15",
    "title": "Database",
    "itemList": [
      {
        "text": "<ol><li><b>What is the difference between primary key and unique key? </b>Primary key is used to identify a row in a table, where unique key is used to prevent duplicated values in a column (with the exception of null entry). By default, DBMS creates Clustered index on primary key, while unique key could only have non-clustered index.</li><li><b>What is the difference between Join and Union? </b><p>Joins and Unions can be used to combine data from one or more tables.  The difference lies in how the data is combined.</p><p>In simple terms, joins combine data into new columns.  If two tables are joined together, then the data from the first table is shown in one set of column alongside the second table’s column in the same row.</p><p>Unions combine data into new rows.  If two tables are “unioned” together, then the data from the first table is in one set of rows, and the data from the second table in another set.  The rows are in the same result.</p></li><li><b>What is the difference between TRUNCATE vs DELETE?</b><p>TRUNCATE TABLE is a statement that quickly deletes all records in a table by deallocating the data pages used by the table. This reduces the resource overhead of logging the deletions, as well as the number of locks acquired; however, it bypasses the transaction log, and the only record of the truncation in the transaction logs is the page deallocation. Records removed by the TRUNCATE TABLE statement cannot be restored if not in a transaction. You cannot specify a WHERE clause in a TRUNCATE TABLE statement, it is all or nothing. The advantage to using TRUNCATE TABLE is that in addition to removing all rows from the table it resets the IDENTITY back to the SEED, and the deallocated pages are returned to the system for use in other areas.</p><p>DELETE TABLE statements delete rows one at a time, logging each row in the transaction log, as well as maintaining log sequence number (LSN) information. Although this consumes more database resources and locks, these transactions can be rolled back if necessary. You can also specify a WHERE clause to narrow down the rows to be deleted. When you delete a large number of rows using a DELETE FROM statement, the table may hang on to the empty pages requiring manual release using DBCC SHRINKDATABASE (db_name).</p></li></ol>",
        "image": ""
      }
    ]
  },
  {
    "id": 140,
    "date": "2019/01/16",
    "title": "Nodejs",
    "itemList": [
      {
        "text": "<ol><li><b>What is the difference between Promise and Observable? </b><br/><img src='../assets/image/it/interview/promiseVSObservable.png'></li><li><b>What is -g flag do for npm? </b>It is to specify that the package would be available globally.</li></ol>",
        "image": ""
      }
    ]
  },
  {
    "id": 150,
    "date": "2019/01/17",
    "title": "Spring",
    "itemList": [
      {
        "text": "<ol><li><b>What are the advantages of using Spring Framework are? </b><br/><ul><li>Reducing direct dependencies between different components of the application, usually Spring IoC container is responsible for initializing resources or beans and inject them as dependencies.</li><li>Writing unit test cases are easy in Spring framework because our business logic doesn’t have direct dependencies with actual resource implementation classes. We can easily write a test configuration and inject our mock beans for testing purposes.</li><li>Reduces the amount of boiler-plate code, such as initializing objects, open/close resources. I like JdbcTemplate class a lot because it helps us in removing all the boiler-plate code that comes with JDBC programming.</li><li>Spring framework is divided into several modules, it helps us in keeping our application lightweight. For example, if we don’t need Spring transaction management features, we don’t need to add that dependency on our project.</li><li>Spring framework support most of the Java EE features and even much more. It’s always on top of the new technologies, for example, there is a Spring project for Android to help us write better code for native Android applications. This makes spring framework a complete package and we don’t need to look after the different framework for different requirements.</li></ul></li><li><b>What is Spring IoC Container? </b>Spring IoC container is the program that injects dependencies into an object and makes it ready for our use. Spring Framework IoC container classes are part of <code>org.springframework.beans</code> and <code>org.springframework.context</code> packages and provides us different ways to decouple the object dependencies.<br/>Some of the useful ApplicationContext implementations that we use are:<ul><li><code>AnnotationConfigApplicationContext</code>: For standalone java applications using annotations based configuration</li><li><code>ClassPathXmlApplicationContext</code>: For standalone java applications using XML based configuration</li><li><code>FileSystemXmlApplicationContext</code>: Similar to ClassPathXmlApplicationContext except that the xml configuration file can be loaded from anywhere in the file system</li><li><code>AnnotationConfigWebApplicationContext</code> and <code>XmlWebApplicationContext</code> for web applications</li></ul></li><li><b>What is Spring Bean life cycle? </b>Spring Beans are initialized by Spring Container and all the dependencies are also injected. When the context is destroyed, it also destroys all the initialized beans. This works well in most of the cases but sometimes we want to initialize other resources or do some validation before making our beans ready to use. Spring framework provides support for post-initialization and pre-destroy methods in spring beans.<br/>We can do this by two ways – by implementing InitializingBean and DisposableBean interfaces or using init-method and destroy-method attribute in spring bean configurations. For more details, please read Spring Bean Life Cycle Methods.</li><li><b>What are different types of Spring Bean autowiring? </b>There are four types of autowiring in Spring framework.<ul><li>autowire byName</li><li>autowire byType</li><li>autowire by constructor</li><li>autowiring by @Autowired and @Qualifier annotations</li></ul></li><li><b>What is a Controller in Spring MVC? </b><p>Just like MVC design pattern, Controller is the class that takes care of all the client requests and send them to the configured resources to handle it. In Spring MVC, org.springframework.web.servlet.DispatcherServlet is the front controller class that initializes the context based on the spring beans configurations.</p><p>A Controller class is responsible to handle a different kind of client requests based on the request mappings. We can create a controller class by using <code>@Controller</code> annotation. Usually, it’s used with <code>@RequestMapping</code> annotation to define handler methods for specific URI mapping.</p></li><li><b>What’s the difference between @Component, @Controller, @Repository & @Service annotations in Spring? </b><p><code>@Component</code> is used to indicate that a class is a component. These classes are used for auto-detection and configured as bean when annotation based configurations are used.</p><p><code>@Controller</code> is a specific type of component, used in MVC applications and mostly used with RequestMapping annotation.</p><p><code>@Repository</code> annotation is used to indicate that a component is used as repository and a mechanism to store/retrieve/search data. We can apply this annotation with DAO pattern implementation classes.</p><p><code>@Service</code> is used to indicate that a class is a Service. Usually, the business facade classes that provide some services are annotated with this.</p><p>We can use any of the above annotations for a class for auto-detection but different types are provided so that you can easily distinguish the purpose of the annotated classes.</p></li><li><b>What is ViewResolver in Spring? </b><code>ViewResolver</code> implementations are used to resolve the view pages by name. Usually we configure it in the spring bean configuration file. InternalResourceViewResolver is one of the implementation of ViewResolver interface and we are providing the view pages directory and suffix location through the bean properties.</li><li><b>What is a MultipartResolver and when its used? </b><code>MultipartResolver</code> interface is used for uploading files – <code>CommonsMultipartResolver</code> and <code>StandardServletMultipartResolver</code> are two implementations provided by spring framework for file uploading. By default there are no multipart resolvers configured but to use them for uploading files, all we need to define a bean named 'multipartResolver' with type as MultipartResolver in spring bean configurations.</li></ol>",
        "image": ""
      }
    ]
  },
  {
    "id": 160,
    "date": "2019/01/21",
    "title": "Javascript",
    "itemList": [
      {
        "text": "<ol><li><b>What is !!<i>var</i> for? </b>It casts to boolean. The right ! negates it once, converting values as below:<ul><li>undefined to true</li><li>bnull to true</li><li>+0 to true</li><li>-0 to true</li><li>'' to true</li><li>NaN to true</li><li>false to true</li><li>All other expressions to false</li></ul><br/>The left ! negates the result again (double negation)</li><li><b>Is Javascript single-threaded? </b>Yes, JavaScript is a single-threaded environment, meaning multiple scripts cannot run at the same time. As an example, imagine a site that needs to handle UI events, query and process large amounts of API data, and manipulate the DOM. Pretty common, right? Unfortunately all of that can't be simultaneous due to limitations in browsers' JavaScript runtime. Script execution happens within a single thread.<br/><p>Developers mimic 'concurrency' by using techniques like setTimeout(), setInterval(), XMLHttpRequest, and event handlers. Yes, all of these features run asynchronously, but non-blocking doesn't necessarily mean concurrency. Asynchronous events are processed after the current executing script has yielded.</p></li><li><b>Is null a Object? </b>Yes, null is also considered an object.</li><li><b>How to empty an array?</b><br>array = []; -- an new array is created and assigned to the variable, the old one still in memory, leading to memory leak.<br>array.length = 0; -- delete everything in the array</li></ol>",
        "image": ""
      }
    ]
  },
  {
    "id": 170,
    "date": "2019/01/22",
    "title": "Rest API",
    "itemList": [
      {
        "text": "<ol><li><b>which rest APIs are idempotent? </b>In the context of REST APIs, when making multiple identical requests has the same effect as making a single request – then that REST API is called idempotent. <mark>GET, PUT, DELETE, HEAD, OPTIONS, TRACE</mark> are idempotent; while <mark>POST</mark> is not.</li></ol>",
        "image": ""
      }
    ]
  },
  {
    "id": 180,
    "date": "2019/10/29",
    "title": "Java",
    "itemList": [
      {
        "text": "<ul><li><b>What is stack overflow? </b><p>A stack overflow is an undesirable condition in which a particular computer program tries to use more memory space than the call stack has available. In programming, the call stack is a buffer that stores requests that need to be handled.<p>The size of a call stack depends on various factors. It is usually defined at the start of a program. Its size can depend on the architecture of the computer on which the program runs, the language in which the program is written, and the total amount of available memory in the system. When a stack overflow occurs as a result of a program's excessive demand for memory space, that program (and sometimes the entire computer) may crash.</p></li></ul>",
        "image": ""
      },
      {
        "text": "<ul><li><b>ArrayList VS LinkedList? </b><p>ArrayList and LinkedList both implements List interface and maintains insertion order. Both are non synchronized classes.</p><p>However, there are many differences between ArrayList and LinkedList classes that are given below:</p></li></ul>",
        "image": "../assets/image/it/interview/arraylist-linked-list.png"
      }
    ]
  },
  {
    "id": 190,
    "date": "2019/11/03",
    "title": "PCF",
    "itemList": [
      {
        "text": "<ul><li><b>Bosh</b><p>BOSH is an open-source tool that lets you run software systems in the cloud. BOSH and its IaaS-specific Cloud Provider Interfaces (CPIs) are what let PCF run on multiple IaaSes.<ul><li>Not only do CD for apps, but for Servers (Infrastracture - OS)</li><li></li></ul></p></li></ul>",
        "image": ""
      },
      {
        "text": "<ul><li><b>cf restart vs restage</b><p><code>restart</code> stops your application and restarts it with the already compiled droplet.</p><p><code>restage</code> stops your application, then compile a new droplet, and restarts it with the newly compiled droplet.</p>",
        "image": ""
      },
      {
        "text": "<ul><li><b>PCF cli</b><ul><li><code>cf create-service</code>: </li><li><code>cf bind-service</code> </li><li><code>cf bind-service</code> </li></ul></li></ul>",
        "image": ""
      }
    ]
  }
]