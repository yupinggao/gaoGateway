[
  {
    "id": 5,
    "date": "2015/10/31",
    "title": "Hibernate",
    "itemList": [
      {
        "text": "<p>Hibernate is a full-featured, open source Object-to-Relational mapping framework. Hibernate classes are POJOs, and can work inside or outside of a J2EE container.</p>",
        "image": ""
      },
      {
        "text": "<b>Hibernate Advantages:</b><br/><ol><li>Hibernate is Database Independent so selected database can be used.</li><li>Easy installation.</li><li>Hibernate has got layered architecture.</li><li>Development with Hibernate is easier than JDBC.</li><li>Connection pool APIs(c3p0, dbcp) can be integrated with Hibernate easily.</li></ol>",
        "image": ""
      },
      {
        "text": "<b>Hibernate Disadvantages:</b><br/><ol><li>Hibernate is slower than the JDBC.</li><li>Writing SQL which contains multi-join is harder than JDBC.</li><li>Tracking the problem is sometimes harder than JDBC.</li><li>Batch processing performance is not better than JDBC.</li></ol>",
        "image": ""
      },
      {
        "text": "<p><b>Configuration Object:</b><br/>Hibernate Configuration Object is created firstly when an application used Hibernate initializes. It contains configuration informations(database connection informations, connection pool informations, etc…). It provides two keys components:</p><p>1) Database Connection : This is handled via hibernate.properties or hibernate.cfg.xml.<br/>2) Class Mapping Setup : creates the connection between the Java classes and database tables.",
        "image": ""
      },
      {
        "text": "<b>SessionFactory Object</b><br/>SessionFactory object provides session objects which the application needs. It is thread safe object and used by all the threads of an application. A SessionFactory object points only one Database. If multiple DBs are used, multiple SessionFactory objects have to be created.",
        "image": ""
      },
      {
        "text": "<b>Session Object</b><br/>A Session is used to get a physical connection with a database. it usually equals one connection (Connection) with a database. It usualy is not thread safe so after the session is opened, it has to be closed.",
        "image": ""
      },
      {
        "text": "<b>Transaction Object</b><br/>It provides transaction functionality via Hibernate. Also, Transactions in Hibernate are handled by integrating JTA.",
        "image": ""
      },
      {
        "text": "<b>Query Object</b><br/>Query object used to retrieve (and recreate) persistent objects by using SQL or Hibernate Query Language (HQL) string.",
        "image": ""
      },
      {
        "text": "<b>Criteria Object</b><br/>Criteria object used to retrieve (and recreate) persistent objects by using object oriented criteria queries.",
        "image": ""
      },
      {
        "text": "<b>Hibernate Entity / Persistence LifeCycle</b><br/><ul><li><b>Transient State: </b>Newly created POJO object will be in the transient state. Transient object doesn’t represent any row of the database i.e. not associated with any session object. It’s plain simple java object.</li><li><b>Persistent State: </b>Persistent object represent one row of the database and always associated with some unique hibernate session. Changes to persistent objects are tracked by hibernate and are saved into database when commit call happen.</li><li><b>Detached: </b>Detached objects are those who were once persistent in past, and now they are no longer persistent. To persist changes done in detached objects, you must reattach them to hibernate session.</li><li><b>Removed: </b>Removed objects are persistent objects that have been passed to the session’s remove() method and soon will be deleted as soon as changes held in the session will be committed to database.</li></ul>",
        "image": "../assets/image/it/framework/HibernateLifeCycle.gif",
        "imageClass": "mx-auto d-block"        
      }
    ]
  },
  {
    "id": 10,
    "date": "2017/10/10",
    "title": "Spring",
    "itemList": [
      {
        "text": "<p>The Spring Framework is an open-source, application framework and inversion of control container for the Java platform. The framework's core features can be used by any Java application, but there are extensions for building web applications on top of the Java EE (Enterprise Edition) platform. Although the framework does not impose any specific programming model, it has become popular in the Java community as an addition to, or even replacement for the Enterprise JavaBeans (EJB) model.",
        "image": ""
      },
      {
        "text": "<p>The core features of the Spring Framework can be used in developing any Java application, but there are extensions for building web applications on top of the Java EE platform. Spring framework targets to make J2EE development easier to use and promotes good programming practices by enabling a POJO-based programming model.</p><p>The Spring Framework provides about 20 modules which can be used based on an application requirement.",
        "image": "../assets/image/it/framework/1.png"
      },
      {
        "text": "<p><b>Benefits of Using the Spring Framework:</b></p><p><ol><li>Spring enables developers to develop enterprise-class applications using POJOs. The benefit of using only POJOs is that you do not need an EJB container product such as an application server but you have the option of using only a robust servlet container such as Tomcat or some commercial product.</li><li>Spring is organized in a modular fashion. Even though the number of packages and classes are substantial, you have to worry only about the ones you need and ignore the rest.</li><li>Spring does not reinvent the wheel, instead it truly makes use of some of the existing technologies like several ORM frameworks, logging frameworks, JEE, Quartz and JDK timers, and other view technologies.</li><li>Testing an application written with Spring is simple because environment-dependent code is moved into this framework. Furthermore, by using JavaBeanstyle POJOs, it becomes easier to use dependency injection for injecting test data.</li><li>Spring's web framework is a well-designed web MVC framework, which provides a great alternative to web frameworks such as Struts or other over-engineered or less popular web frameworks.</li><li>Spring provides a convenient API to translate technology-specific exceptions (thrown by JDBC, Hibernate, or JDO, for example) into consistent, unchecked exceptions.</li><li>Lightweight IoC containers tend to be lightweight, especially when compared to EJB containers, for example. This is beneficial for developing and deploying applications on computers with limited memory and CPU resources.</li><li>Spring provides a consistent transaction management interface that can scale down to a local transaction (using a single database, for example) and scale up to global transactions (using JTA, for example).</li></ol>",
        "image": ""
      },
      {
        "text": "<p><b>Spring Bean Scopes:</b></p><p><ol><li>Singleton(default*): Scopes a single bean definition to a single object instance per Spring IoC container.</li><li>Prototype: Scopes a single bean definition to any number of object instances.</li><li>Request: Scopes a single bean definition to the lifecycle of a single HTTP request; that is each and every HTTP request will have its own instance of a bean created off the back of a single bean definition. Only valid in the context of a web-aware Spring ApplicationContext.</li><li>Session: Scopes a single bean definition to the lifecycle of a HTTP Session. Only valid in the context of a web-aware Spring ApplicationContext.</li><li>Global session: Scopes a single bean definition to the lifecycle of a global HTTP Session. Typically only valid when used in a portlet context. Only valid in the context of a web-aware Spring ApplicationContext.</li></ol>",
        "image": ""
      }
    ]
  },
  {
    "id": 20,
    "date": "2019/01/15",
    "title": "Spring MVC",
    "itemList": [
      {
        "text": "<p>The Spring Web model-view-controller (MVC) framework is designed around a DispatcherServlet that dispatches requests to handlers, with configurable handler mappings, view resolution, locale and theme resolution as well as support for uploading files. The default handler is based on the @Controller and @RequestMapping annotations, offering a wide range of flexible handling methods. With the introduction of Spring 3.0, the @Controller mechanism also allows you to create RESTful Web sites and applications, through the @PathVariable annotation and other features.",
        "image": ""
      },
      {
        "text": "<p>A key design principle in Spring Web MVC and in Spring in general is the “Open for extension, closed for modification” principle.</p><p>Some methods in the core classes of Spring Web MVC are marked final. As a developer you cannot override these methods to supply your own behavior. This has not been done arbitrarily, but specifically with this principle in mind.</p>        ",
        "image": ""
      },
      {
        "text": "<p>Spring's view resolution is extremely flexible. A Controller is typically responsible for preparing a model Map with data and selecting a view name but it can also write directly to the response stream and complete the request. View name resolution is highly configurable through file extension or Accept header content type negotiation, through bean names, a properties file, or even a custom ViewResolver implementation. The model is a Map interface, which allows for the complete abstraction of the view technology. You can integrate directly with template based rendering technologies such as JSP, Velocity and Freemarker, or directly generate XML, JSON, Atom, and many other types of content. The model Map is simply transformed into an appropriate format, such as JSP request attributes, a Velocity template model.</p>",
        "image": ""
      },
      {
        "text": "<b>The <code class='classname'>DispatcherServlet</code></b><br/><br/><p>Spring's web MVC framework is, like many other web MVC frameworks, request-driven, designed around a central Servlet that dispatches requests to controllers and offers other functionality that facilitates the development of web applications. Spring's <code class='classname'>DispatcherServlet</code> however, does more than just that. It is completely integrated with the Spring IoC container and as such allows you to use every other feature that Spring has.</p> <p>The request processing workflow of the Spring Web MVC <code class='classname'>DispatcherServlet</code> is illustrated in the following diagram. The pattern-savvy reader will recognize that the <code class='classname'>DispatcherServlet</code> is an expression of the <span class='quote'>&#8220;<span class='quote'>Front Controller</span>&#8221;</span> design pattern (this is a pattern that Spring Web MVC shares with many other leading web frameworks).</p>",
        "image": "../assets/image/it/framework/mvc1.png",
        "imageClass": "mx-auto d-block"
      },
      {
        "text": "<p>In the Web MVC framework, each DispatcherServlet has its own WebApplicationContext, which inherits all the beans already defined in the root WebApplicationContext. These inherited beans can be overridden in the servlet-specific scope, and you can define new scope-specific beans local to a given Servlet instance.</p>",
        "image": "../assets/image/it/framework/mvc-contexts.gif",
        "imageClass": "mx-auto d-block"
      }
    ]
  },
  {
    "id": 50,
    "date": "2019/01/10",
    "title": "Spring Jdbctemplate",
    "itemList": [
      {
        "text": "<p>Spring JdbcTemplate is a powerful mechanism to connect to the database and execute SQL queries. It uses JDBC api internally at the abstraction layer, and therefore eliminates a lot of troubles for application code to call JDBC API directly, and repeat a lot of boilerplate code. The following tasks are complished by the framework:</p><ul><li>Coding before and after executing the query, such as creating connection, statement, closing resultset, connection etc.</li><li>Exception handling on the database logic.</li><li>Transaction handling.</li></ul>",
        "image": ""
      },
      {
        "text": "<b>Main components</b><p><ol><li><b>Configuration File: </b></li><li><b>JdbcTemplate class: </b></li><li><b>Entity classes: </b></li><li><b>DAO classes: </b></li><li><b>RowMapper classes: </b></li></ol>",
        "image": ""
      }
    ]
  },
  {
    "id": 60,
    "date": "2019/02/04",
    "title": "Spring Security",
    "itemList": [
      {
        "text": "<p>Spring Security is a powerful and highly customizable authentication and access-control framework. It is the de-facto standard for securing Spring-based applications.</p><p>Spring Security is a framework that focuses on providing both authentication and authorization to Java applications. Like all Spring projects, the real power of Spring Security is found in how easily it can be extended to meet custom requirements.</p>",
        "image": ""
      },
      {
        "text": "<b>Features</b><p><ul><li>Comprehensive and extensible support for both Authentication and Authorization</li><li>Protection against attacks like session fixation, clickjacking, cross site request forgery, etc</li><li>Servlet API integration</li><li>Optional integration with Spring Web MVC</li></ul>",
        "image": ""
      }
    ]
  },
  {
    "id": 70,
    "date": "2019/01/10",
    "title": "Spring Data",
    "itemList": [
      {
        "text": "<p>Spring Data’s mission is to provide a familiar and consistent, Spring-based programming model for data access while still retaining the special traits of the underlying data store.</p><p>It makes it easy to use data access technologies, relational and non-relational databases, map-reduce frameworks, and cloud-based data services. This is an umbrella project which contains many subprojects that are specific to a given database. The projects are developed by working together with many of the companies and developers that are behind these exciting technologies.</p>",
        "image": ""
      },
      {
        "text": "<b>Main modules</b><p><ol><li><b>Spring Data Commons: </b>Core Spring concepts underpinning every Spring Data module.</li><li><b>Spring Data JDBC: </b>Spring Data repository support for JDBC.</li><li><b>Spring Data JDBC Ext: </b>Support for database specific extensions to standard JDBC including support for Oracle RAC fast connection failover, AQ JMS support and support for using advanced data types.</li><li><b>Spring Data JPA: </b>Spring Data repository support for JPA.</li><li><b>Spring Data KeyValue: </b>Map based repositories and SPIs to easily build a Spring Data module for key-value stores.</li><li><b>Spring Data LDAP: </b>Spring Data repository support for Spring LDAP.</li><li><b>Spring Data MongoDB: </b>Spring based, object-document support and repositories for MongoDB.</li><li><b>Spring Data Redis: </b>Easy configuration and access to Redis from Spring applications.</li><li><b>Spring Data REST: </b>Exports Spring Data repositories as hypermedia-driven RESTful resources.</li></ol>",
        "image": ""
      }
    ]
  },
  {
    "id": 80,
    "date": "2019/01/10",
    "title": "Spring Boot",
    "itemList": [
      {
        "text": "<p>Spring Boot provides a good platform for Java developers to develop a stand-alone and production-grade spring application that you can just run. You can get started with minimum configurations without the need for an entire Spring configuration setup.</p>",
        "image": ""
      },
      {
        "text": "Spring Boot is designed with the following goals: <ol><li>To avoid complex XML configuration in Spring</li><li>To develop a production ready Spring applications in an easier way</li><li>To reduce the development time and run the application independently</li><li>Offer an easier way of getting started with the application</li></ol>",
        "image": ""
      },
      {
        "text": "<b>How does it work? </b><p>Spring Boot automatically configures your application based on the dependencies you have added to the project by using <code>@EnableAutoConfiguration</code> annotation. For example, if MySQL database is on your classpath, but you have not configured any database connection, then Spring Boot auto-configures an in-memory database.</p><p>The entry point of the spring boot application is the class contains <code>@SpringBootApplication</code> annotation and the main method.</p><p>Spring Boot automatically scans all the components included in the project by using <code>@ComponentScan</code> annotation.</p><p>Spring Boot doesn’t generate code or make edits to your files. Instead, when you start up your application, Spring Boot dynamically wires up beans and settings and applies them to your application context.</p>",
        "image": ""
      },
      {
        "text": "<b>Spring Boot Starters</b><p>Handling dependency management is a difficult task for big projects. Spring Boot resolves this problem by providing a set of dependencies for developers convenience.</p><p>For example, if you want to use Spring and JPA for database access, it is sufficient if you include <code>spring-boot-starter-data-jpa</code> dependency in your project.</p><p>Note that all Spring Boot starters follow the same naming pattern <code>spring-boot-starter- *</code>, where * indicates that it is a type of the application.</p>",
        "image": ""
      },
      {
        "text": "<b>Auto Configuration</b><p>Spring Boot Auto Configuration automatically configures your Spring application based on the JAR dependencies you added in the project.</p><p>For this purpose, you need to add <code>@EnableAutoConfiguration</code> annotation or <code>@SpringBootApplication</code> annotation to your main class file. Then, your Spring Boot application will be automatically configured.</p><p>Observe the following code for a better understanding:<br/><div class='jumbotron'>import org.springframework.boot.SpringApplication;<br/>import org.springframework.boot.autoconfigure.EnableAutoConfiguration;<br/><br/>@EnableAutoConfiguration<br/>public class DemoApplication {<br/>&nbsp;&nbsp;&nbsp;&nbsp;public static void main(String[] args) {<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SpringApplication.run(DemoApplication.class, args);<br/>&nbsp;&nbsp;&nbsp;&nbsp;}<br/>}</div></p>",
        "image": ""
      },
      {
        "text": "<b>Spring Boot Application</b><p>The entry point of the Spring Boot Application is the class contains <code>@SpringBootApplication</code> annotation. This class should have the main method to run the Spring Boot application. <code>@SpringBootApplication</code> annotation includes Auto- Configuration, Component Scan, and Spring Boot Configuration.</p><p>If you added <code>@SpringBootApplication</code> annotation to the class, you do not need to add the <code>@EnableAutoConfiguration</code>, <code>@ComponentScan</code> and <code>@SpringBootConfiguration</code> annotation. The <code>@SpringBootApplication</code> annotation includes all other annotations.</p>",
        "image": ""
      },
      {
        "text": "<b>Component Scan</b><p>Spring Boot application scans all the beans and package declarations when the application initializes. You need to add the @ComponentScan annotation for your class file to scan your components added in your project.</p>",
        "image": ""
      },
      {
        "text": "<b>Exception Handling</b><p>The <code>@ControllerAdvice</code> is an annotation, to handle the exceptions globally.</p><p>The @ExceptionHandler is an annotation used to handle the specific exceptions and sending the custom responses to the client.</p>",
        "image": ""
      },
      {
        "text": "<b>Interceptor</b><p>The Interceptor can be used in Spring Boot to perform operations under the following situations:<ul><li>Before sending the request to the controller</li><li>Before sending the response to the client</li></ul></p><p>For example, you can use an interceptor to add the request header before sending the request to the controller and add the response header before sending the response to the client.</p><p>To work with interceptor, you need to create <code>@Component</code> class that supports it and it should implement the <code>HandlerInterceptor</code> interface.</p><p>The following are the three methods you should know about while working on Interceptors:<ul><li><b>preHandle()</b>: method − This is used to perform operations before sending the request to the controller. This method should return true to return the response to the client.</li><li><b>postHandle()</b>: method − This is used to perform operations before sending the response to the client.</li><li><b>afterCompletion()</b>: method − This is used to perform operations after completing the request and response.</li></ul></p>",
        "image": ""
      },
      {
        "text": "<b>Rest Template</b><p>Rest Template is used to create applications that consume RESTful Web Services. You can use the restTemplate.exchange() method to consume the web services for all HTTP methods. The code given below shows how to create Bean for Rest Template to auto wiring the Rest Template object.</p>",
        "image": ""
      },
      {
        "text": "<b>File Upload/Download</b><p>For uploading a file, you can use MultipartFile as a Request Parameter and this API should consume Multi-Part form data value.</p><p>For file download, you should use InputStreamResource for downloading a File. We need to set the HttpHeader Content-Disposition in Response and need to specify the response Media Type of the application.</p>",
        "image": ""
      }
    ]
  },
  {
    "id": 90,
    "date": "2019/01/30",
    "title": "Spring Batch",
    "itemList": [
      {
        "text": "<p>Spring Batch is a lightweight, comprehensive batch framework designed to enable the development of robust batch applications vital for the daily operations of enterprise systems. Spring Batch builds upon the productivity, POJO-based development approach, and general ease of use capabilities people have come to know from the Spring Framework, while making it easy for developers to access and leverage more advance enterprise services when necessary.</p><p>Spring Batch provides reusable functions that are essential in processing large volumes of records, including logging/tracing, transaction management, job processing statistics, job restart, skip, and resource management. It also provides more advance technical services and features that will enable extremely high-volume and high performance batch jobs though optimization and partitioning techniques. Simple as well as complex, high-volume batch jobs can leverage the framework in a highly scalable manner to process significant volumes of information.</p>",
        "image": ""
      },
      {
        "text": "<P>Spring Batch is designed with extensibility and a diverse group of end users in mind. The figure below shows a sketch of the layered architecture that supports the extensibility and ease of use for end-user developers.</p>",
        "image": "../assets/image/it/framework/spring-batch-layers.png",
        "imageClass": "mx-auto d-block"
      },
      {
        "text": "<p>This layered architecture highlights three major high level components: Application, Core, and Infrastructure. The application contains all batch jobs and custom code written by developers using Spring Batch. The Batch Core contains the core runtime classes necessary to launch and control a batch job. It includes things such as a JobLauncher, Job, and Step implementations. Both Application and Core are built on top of a common infrastructure. This infrastructure contains common readers and writers, and services such as the RetryTemplate, which are used both by application developers(ItemReader and ItemWriter) and the core framework itself. (retry)</p>",
        "image": ""
      }
    ]
  },
  {
    "id": 100,
    "date": "2017/10/11",
    "title": "Bootstrap",
    "itemList": [
      {
        "text": "Bootstrap is the most popular HTML, CSS, and JavaScript framework for developing responsive, mobile-first web sites. <br><br>Bootstrap includes HTML and CSS based design templates for typography, forms, buttons, tables, navigation, modals, image carousels and many other, as well as optional JavaScript plugins. Bootstrap also gives you the ability to easily create responsive designs.<br><br>Bootstrap uses jQuery for JavaScript plugins (like modals, tooltips, etc). However, if you just use the CSS part of Bootstrap, you don't need jQuery.",
        "image": ""
      }
    ]
  },
  {
    "id": 110,
    "date": "2017/10/11",
    "title": "AngularJS",
    "itemList": [
      {
        "text": "AngularJS is a JavaScript framework. It can be added to an HTML page with a <script> tag. <br><br>AngularJS extends HTML attributes with  Directives, and binds data to HTML with Expressions.",
        "image": ""
      },
      {
        "text": "The ng-app directive defines an AngularJS application.<br><br>The ng-model directive binds the value of HTML controls (input, select, textarea) to application data.<br><br>The ng-bind directive binds application data to the HTML view.",
        "image": ""
      }
    ]
  }
]