[
  {
    "id": 20,
    "date": "2018/12/16",
    "title": "Deploy angular 7 app into appEngine",
    "itemList": [
      {
        "text": "<b>Prerequisites: </b><ul><li>You have already had a working Angular 7 application named MyApp in myFolder</li><li>You have setup a project in the <abbr title='Google Cloud Platform'>GCP</abbr></li><li>You have Google Cloud SDK Shell installed in your system</li></ul>",
        "image": ""
      },
      {
        "text": "<b>Steps</b><ol><li>Go to root folder of the project, e.g. myFolder/MyApp</li><li>ng build --prod --aot</li><li>Create an app.yaml in the root folder of the project:<br/><div class='jumbotron'># [START runtime]<br/>runtime: nodejs10<br/>handlers:<br/>- url: /<br/>static_files: dist/myApp/index.html<br/>upload: dist/myApp/index.html<br/>- url: /<br/>static_dir: dist/myApp<br/># [END runtime]</div></li><li>Start Google Cloud SDK Shell</li><li>Go to root folder of the project: myApp</li><li>gcloud init</li><li>gcloud app deploy</li><li>gcloud app browse</li></ol>",
        "image": ""
      },
      {
        "text": "<b>For the pre-instalation requirements, please visit the following site:</b><ul><li><a href='https://angular.io/guide/quickstart' target='_blank'>Install Angular 7</a></li><li><a href='https://cloud.google.com/appengine/' target='_blank'>Creat App Engine project</a></li><li><a href='https://cloud.google.com/sdk/install' target='_blank'>Install Google Cloud SDK</a></li></ul>",
        "image": ""
      }
    ]
  },
  {
    "id": 40,
    "date": "2018/12/17",
    "title": "Install Docker on Ubuntu",
    "itemList": [
      {
        "text": "<p>The following instructions are based on experience of installing Docker 18.06.1-ce on Ubuntu 14.04.05 LTS</p>",
        "image": ""
      },
      {
        "text": "<b>Steps</b><ol><li>Start a terminal</li><li>Update the apt index by issuring: <mark>sudo apt-get update</mark></li><li>Install packages to allow apt to use a repostory over https by issuring: <mark>sudo apt-get install apt-transport-https ca-certificates curl software-properties-common</mark></li><li>Add Docker's official GPG key by issuring: <mark>curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</mark></li><li>Verify that you have the key with the fingerprint: 9DC8 5822 9FC7 DD38 854A E2D8 8D81 803C 0EBF CD88, by issuring: <mark>sudo apt-key fingerprint 0EBFCD88</mark></li><li>Set up the stable repostory by issuring: <mark>sudo add-apt-repository 'deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable'</mark></li><li>Update the apt index again by issuring: <mark>sudo apt-get update</mark></li><li>Install the latest version of Docker CE by issuring: <mark>sudo apt-get install docker-ce</mark></li><li>Verify that Docker CE is installed correctly by running the hello-world image: <mark>sudo docker run hello-world</mark></li><li>You can always check if the Docker is running by issuring: <mark>sudo systemctl status docker</mark></li></ol>",
        "image": ""
      }
    ]
  },
  {
    "id": 60,
    "date": "2018/12/17",
    "title": "Install Docker CLI on Windows",
    "itemList": [
      {
        "text": "<b>Steps</b><ol><li>get docker.exe, and copy it to a folder</li><li>put the folder in the system path</li></ol>",
        "image": ""
      }
    ]
  },
  {
    "id": 80,
    "date": "2018/12/19",
    "title": "Use Angular Universal for SEO in Angular 7",
    "itemList": [
      {
        "text": "<b>Steps</b><ol><li>Start a terminal, and go to your project root folder</li><li>Add Universal package by issuring: <mark>ng add @ng-toolkit/universal</mark></li><li>Build a angular server version by issuring: <mark>npm run build:prod</mark></li><li>Start the server by issuring: <mark>npm run server</mark></li><li>Verify the server-side rendering by going to: <mark>http://localhost:8080/</mark>, and view the page source</li></ol><p>Note: After these steps, there are two additional ngModules created: app.server.module.ts and app.browser.module.ts. When creating new components, the command should include a <mark>--module</mark> options, e.g. <mark>ng g c newComponent -- module=app.module</mark></p>",
        "image": ""
      }
    ]
  },
  {
    "id": 100,
    "date": "2018/12/23",
    "title": "Install nodejs and npm from PPA for Ubuntu 18.10",
    "itemList": [
      {
        "text": "<mark>cd ~</mark>",
        "image": ""
      },
      {
        "text": "<mark>sudo apt install curl</mark>",
        "image": ""
      },
      {
        "text": "<mark>curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash -</mark>",
        "image": ""
      },
      {
        "text": "<mark>sudo apt-get install -y nodejs</mark>",
        "image": ""
      }
    ]
  },
  {
    "id": 120,
    "date": "2018/12/23",
    "title": "Install Google Cloud SDK for Ubuntu 18.10",
    "itemList": [
      {
        "text": "Create an environment variable for the correct OS: <mark>export CLOUD_SDK_REPO='cloud-sdk-$(lsb_release -c -s)'</mark>",
        "image": ""
      },
      {
        "text": "Add the Cloud SDK distribution URI as a package source: <mark>echo 'deb http://packages.cloud.google.com/apt $CLOUD_SDK_REPO main' | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list</mark>",
        "image": ""
      },
      {
        "text": "Import the Google Cloud public key: <mark>curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -</mark>",
        "image": ""
      },
      {
        "text": "Update and install the Cloud SDK: <mark>sudo apt-get update && sudo apt-get install google-cloud-sdk</mark>",
        "image": ""
      },
      {
        "text": "Change directory to the root of your project in terminal: <mark>cd 'your project root'</mark>",
        "image": ""
      },
      {
        "text": "Run gcloud init to get started: <mark>gcloud init</mark>",
        "image": ""
      }
    ]
  },
  {
    "id": 140,
    "date": "2018/12/24",
    "title": "Deploy Angular 7 App to a Local Docker",
    "itemList": [
      {
        "text": "<p>Prerequisites: <ul><li>You have a working angular 7 application, e.g, angular7-application</li><li>You have a docker (client and server) installed at your local</li><li>Your root application folder is 'home/workspace/angular7-application'</li><li>The application would be deployed in the docker running nginx web server in Alpine</li></ul></p>",
        "image": ""
      },
      {
        "text": "<b>Steps</b><ol><li>Start a terminal, and go to your project root folder by issuring: <mark>cd ~/workspace/angular7-application</mark></li><li>Create a Dockerfile in the root folder of the project:<br/><div class='jumbotron'>FROM nginx:alpine<br/>COPY nginx.conf /etc/nginx/nginx.conf<br/>WORKDIR /usr/share/nginx/html<br/>COPY dist/angular7-application/ .</div></li><li>Create a nginx.conf in the root folder of the project:<br/><div class='jumbotron'>worker_processes  1;<br/>events {<br/>&nbsp;&nbsp;&nbsp;&nbsp;worker_connections  1024;<br/>}<br/>http {<br/>&nbsp;&nbsp;&nbsp;&nbsp;server {<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;listen 80;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;server_name localhost;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;root /usr/share/nginx/html;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;index  index.html index.htm;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;include /etc/nginx/mime.types;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gzip on;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gzip_min_length 1000;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gzip_proxied expired no-cache no-store private auth;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gzip_types text/plain text/css application/json application/javascript application/x-javascript text/xml application/xml application/xml+rss text/javascript;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;location / {<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try_files $uri $uri/ /index.html;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>&nbsp;&nbsp;&nbsp;&nbsp;}<br/>}<br/></div></li><li>Build the application by issuring: <mark>ng build --prod --aot</mark></li><li>Build the image by issuring: <mark>docker build -t angular7-application .</mark></li><li>Verify the image by issuring: <mark>docker image ls</mark></li><li>Run the command below to create a container and map it to the port 2000: <mark>docker run -p 2000:80 --rm angular7-application</mark></li><li>Verify the application by going to: <mark>http://localhost:2000/</mark></li></ol>",
        "image": ""
      }
    ]
  },
  {
    "id": 160,
    "date": "2018/12/31",
    "title": "Build Docker Image and Deploy it in Kubernetes",
    "itemList": [
      {
        "text": "<p>There are two tasks in this tutorial: <ol><li>Build Docker Image and Push it into GCP Container Registry.</li><li>Deploy the application in the image in Kubernetes, and expose the service.</li></ol></p>",
        "image": ""
      },
      {
        "text": "<p>Prerequisites: <ul><li>You have an GCP account</li><li>You have an GCP project, for which billing is enabled, Kubernetes Engine API, and Cloud Build API is enabled</li><li>You have a working application (for this tutorial, it is an angular 7 application), e.g, myApplication</li><li>You have a docker (client and server) installed at your local</li><li>You have gcloud SDK installed at your local</li><li>Your root application folder is 'home/workspace/myApplcation'</li><li>The application would be deployed in the docker running nginx web server in Alpine</li></ul></p>",
        "image": ""
      },
      {
        "text": "<b>Steps</b><ol><li>Start a terminal, and go to your project root folder by issuring: <mark>cd ~/workspace/myApplcation</mark></li><li>Create a Dockerfile in the root folder of the project:<br/><div class='jumbotron'>FROM nginx:alpine<br/>COPY nginx.conf /etc/nginx/nginx.conf<br/>WORKDIR /usr/share/nginx/html<br/>COPY dist/browser/ .</div></li><li>Create a nginx.conf in the root folder of the project:<br/><div class='jumbotron'>worker_processes  1;<br/>events {<br/>&nbsp;&nbsp;&nbsp;&nbsp;worker_connections  1024;<br/>}<br/>http {<br/>&nbsp;&nbsp;&nbsp;&nbsp;server {<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;listen 80;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;server_name localhost;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;root /usr/share/nginx/html;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;index  index.html index.htm;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;include /etc/nginx/mime.types;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gzip on;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gzip_min_length 1000;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gzip_proxied expired no-cache no-store private auth;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gzip_types text/plain text/css application/json application/javascript application/x-javascript text/xml application/xml application/xml+rss text/javascript;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;location / {<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try_files $uri $uri/ /index.html;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>&nbsp;&nbsp;&nbsp;&nbsp;}<br/>}<br/></div></li><li>Create a cloudbuild.yaml in the root folder of the project:<br/><div class='jumbotron'>steps:<br/>- name: 'gcr.io/cloud-builders/docker'<br/>&nbsp;&nbsp;args: [ 'build', '-t', 'gcr.io/$PROJECT_ID/<i>myimagename</i>', '.' ]<br/>images:<br/>- 'gcr.io/$PROJECT_ID/<i>myimagename</i>'</div></li><li>Build the application by issuring: <mark>ng build --prod --aot</mark></li><li>Authorize the gcloud command-line tool to access your project by issuring: <mark>gcloud auth login</mark></li><li>Configure your project for the gcloud tool, where [PROJECT_ID] is your GCP project ID by issuring: <mark>gcloud config set project <i>yourGCP_PROJECT_ID</i></mark></li><li>Build the image and push it into GCP container registry by issuring: <mark>gcloud builds submit --config cloudbuild.yaml .</mark></li><li>Verify the image by:<ol><li>Open the Cloud Build page in the Google Cloud Platform Console</li><li>Select your project and click Open</li><li>Click on a particular build</li><li>Click on the image, and to view the details</li></ol></li></ol>",
        "image": ""
      },
      {
        "text": "<b>Steps to create Kubernetes cluster and deploy the image to the cluster</b><ol><li>Log into GCP console</li><li>Select the project you want work on</li><li>Activate Google Cloud Shell on GCP console</li><li>Click 'START CLOUD SHELL' button</li><li>Verify that the cloud shell is associated with your project ID</li><li>Use <mark>gcloud auth list</mark> to display the active account name</li><li>Use <mark>gcloud config list project</mark> to display the project ID</li><li>Use <mark>gcloud config set compute/zone us-central1-a</mark> to set a default compute zone</li><li>Use <mark>gcloud container clusters create <i>myclusterName-all-lowercase</i></mark> to create a cluster</li><li>Use <mark>gcloud container clusters get-credentials <i>mycluster</i></mark> to authenticate the cluster</li><li>Use <mark>kubectl run <i>myDeploymentName</i> --image=<i>myImageRepostoryURI</i> --port 80</mark> to create a new Deployment named myDeploymentName</li><li>Use <mark>kubectl expose deployment <i>myDeploymentName</i> --type='LoadBalancer'  --port 8080 --target-port 80</mark> to create a Kubernetes Service</li><li>Use <mark>kubectl get service <i>myDeploymentName</i></mark> to inspect the service</li><li>From the previous command's output, copy the Service's external IP address from the EXTERNAL IP column</li><li>Use <mark>http://<i>EXTERNAL-IP</i>:8080</mark> to view the application</li></ol>",
        "image": ""
      },
      {
        "text": "<p><b>Clean up Image:</b><br/><br/>To avoid incurring charges to your GCP account for the resources used: <ol><li>Open the Container Registry page in the Google Cloud Platform Console</li><li>Select your project and click Open</li><li>Click your image</li><li>Select all the images and click Delete</li></ol></p>",
        "image": ""
      },
      {
        "text": "<p><b>Clean up Cluster:</b><br/><br/>To avoid incurring charges to your GCP account for the resources used: <ol><li><mark>kubectl delete service hello-server</mark>: to delete the application's Service</li><li><mark>gcloud container clusters delete [CLUSTER_NAME] --zone=us-central1-a</mark> to delete your cluster</li></ol></p>",
        "image": ""
      }
    ]
  },
  {
    "id": 170,
    "date": "2019/11/10",
    "title": "Deploy Voting App Using Docker and Docker Compose",
    "itemList": [
      {
        "text": "<p>There are two tasks in this tutorial: <ol><li>Deploy the application using Docker.</li><li>Deploy the application using docker compose</li></ol></p>",
        "image": ""
      },
      {
        "text": "<p>Prerequisites: the following images have been created:<ol><li>redis</li><li>postgres:9.4</li><li>eesprit/voting-app-vote</li><li>eesprit/voting-app-result</li><li>eesprit/voting-app-worker</li><ol></p>",
        "image": ""
      },
      {
        "text": "<b>Steps for using Docker:</b><ol><li>Start a terminal, and go to your project root folder by issuring: <mark>cd ~/workspace/myApplcation</mark></li><li><code>sudo docker run -d --name=redis redis</code></li><li><code>sudo docker run -d --name=db postgres:9.4</code></li><li><code>sudo docker run -d --name=vote -p 5000:80 --link redis:redis eesprit/voting-app-vote</code></li><li><code>sudo docker run -d --name=result -p 5001:80 --link db:db eesprit/voting-app-result</code></li><li><code>sudo docker run -d --name=worker --link db:db --link redis:redis eesprit/voting-app-worker</code></li><li>verify the applications using 'localhost:5000' and 'localhost:5001'</li></ol>",
        "image": ""
      },
      {
        "text": "<b>Steps for using Docker Compose:</b>Firtsly, create a docker-compose.yml with the following:",
        "image": "../assets/image/it/cloud/docker-compose.png"
      },
      {
        "text": "then run <code>sudo docker-compose up</code> (use control-c to stop)",
        "image": ""
      },
      {
        "text": "Run in background: <code>sudo docker-compose up -d</code> then run <code>sudo docker-compose stop</code> to stop",
        "image": ""
      }
    ]
  },
  {
    "id": 180,
    "date": "2018/12/31",
    "title": "Deploy Docker Image in Kebernetes",
    "itemList": [
      {
        "text": "<p>Prerequisites: <ul><li>You have an GCP account</li><li>You have an GCP project</li><li>You have a Docker image created and stored in a repostory</li></p>",
        "image": ""
      },
      {
        "text": "<b>Steps</b><ol><li>Log into GCP console</li><li>Select the project you want work on</li><li>Activate Google Cloud Shell on GCP console</li><li>Click 'START CLOUD SHELL' button</li><li>Verify that the cloud shell is associated with your project ID</li><li>Use <mark>gcloud auth list</mark> to display the active account name</li><li>Use <mark>gcloud config list project</mark> to display the project ID</li><li>Use <mark>gcloud config set compute/zone us-central1-a</mark> to set a default compute zone</li><li>Use <mark>gcloud container clusters create <i>myclusterName-all-lowercase</i></mark> to create a cluster</li><li>Use <mark>gcloud container clusters get-credentials <i>mycluster</i></mark> to authenticate the cluster</li><li>Use <mark>kubectl run <i>myDeploymentName</i> --image=<i>myImageRepostoryURI</i> --port 8080</mark> to create a new Deployment named myDeploymentName</li><li>Use <mark>kubectl expose deployment <i>myDeploymentName</i> --type='LoadBalancer'</mark> to create a Kubernetes Service</li><li>Use <mark>kubectl get service <i>myDeploymentName</i></mark> to inspect the service</li><li>From the previous command's output, copy the Service's external IP address from the EXTERNAL IP column</li><li>Use <mark>http://<i>EXTERNAL-IP</i>:8080</mark> to view the application</li></ol>",
        "image": ""
      }
    ]
  },
  {
    "id": 220,
    "date": "2018/12/24",
    "title": "Git And Github in Ubuntu",
    "itemList": [
      {
        "text": "<p>Prerequisites: <ul><li>You have installed git in your local. To verify if you have git, go to a terminal, and type <mark>git --version</mark></li><li>You have had a Github account setup.</li><li>You have created a github repostory, e.g. myRepostory, in Github</li></p>",
        "image": ""
      },
      {
        "text": "<b>Steps for New Folder</b><ol><li>Start a terminal, and create a folder for your project to be added to the repostory by issuring: <br/><mark>cd ~/workspace</mark><br/><mark>mkdir myGitFolder</mark><br/><mark>cd myGitFolder</mark></li><li>Create a README.md in the folder by: <mark>echo '# myRepostory' >> README.md</mark></li><li>Initiate git at local by <mark>git ini</mark></li><li>Add README.md the local git: <mark>git add README.md</mark></li><li>Commit the change with come coments: <mark>git commit -m 'initial commit'</mark></li><li>Link the local repostory to Github: <mark>git remote add origin <i>yourGithubURL</i>. e.g. https://github.com/Myusername/myRepostory.git</mark></li><li>Push the local repostory to Github: <mark>git push -u origin master</mark>. When prompted, enter the user name and password.</li></ol>",
        "image": ""
      }
      ,
      {
        "text": "<b>Steps for existing folders</b>: Please note that it is recommended that every repository has a README, LICENCE, and .gitignore file<ol><li>Start a terminal, and go to the folder for your project to be added to the repostory by issuring: <br/><mark>cd <i>myFolderName</i></mark></li><li>Initiate git at local by <mark>git ini</mark></li><li>Add all files in the current folder and sub-folders to the local git: <mark>git add .</mark></li><li>Commit the change with come coments: <mark>git commit -m 'initial commit'</mark></li><li>Link the local repostory to Github: <mark>git remote add origin <i>yourGithubURL</i>. e.g. https://github.com/Myusername/myRepostory.git</mark></li><li>Push the local repostory to Github: <mark>git push</mark>. When prompted, enter the user name and password.</li></ol>",
        "image": ""
      }
    ]
  },
  {
    "id": 240,
    "date": "2019/01/13",
    "title": "MongoDB Shell",
    "itemList": [
      {
        "text": "<p>Prerequisites: <ul><li>You have installed MongoDB in your local. To verify the mongoDB version, go to the bin folder of your local installation folder, and type <mark>mongo --version</mark></p>",
        "image": ""
      },
      {
        "text": "<b>Useful Commands</b><br/><ol><li>Start a terminal, and go to the bin folder of the mongoDB installation</li><li><mark>mongo: </mark>to connect to the mongodb</li><li><mark>db: </mark>to display the currently connected database</li><li><mark>use <i>aDatabaseName</i>: </mark>to switch current db to <i>aDatabaseName</i></li><li><mark>db.stats(): </mark>to show the statistic of the database</li><li><mark>show dbs: </mark>show the databases</li><li><mark>show collections: </mark>to show the collections in the current db</li><li><mark>db.<i>documentName</i>.find(): </mark>show the document content</li><li><mark>exit: </mark>to exit the shell</li></ol>",
        "image": ""
      }
    ]
  },
  {
    "id": 260,
    "date": "2019/01/13",
    "title": "Install Jenkins",
    "itemList": [
      {
        "text": "<ol><li><a href='http://mirrors.jenkins.io/war-stable/latest/jenkins.war'>Download Jenkins</a>.</li><li>copy the war file to a folder where you want to start Jenkins.</li><li>Open up a terminal in the download directory.</li><li>Run <code>java -jar jenkins.war --httpPort=8080</code>.<li>Browse to <code>http://localhost:8080</code>.<li>Follow the instructions to complete the installation.</li><li>If you want install Jenkins as a window's service, go to Manage Jenkins Menue, then Click 'Install as Windows Service'</li></ol>",
        "image": ""
      }
    ]
  },
  {
    "id": 280,
    "date": "2019/01/16",
    "title": "Build a Node Rest API",
    "itemList": [
      {
        "text": "<p>Prerequisites: <ul><li>You have installed MongoDB in your local. To verify the mongoDB version, go to the bin folder of your local installation folder, and type <mark>mongo --version</mark></p>",
        "image": ""
      },
      {
        "text": "<ol><li>Create a folder, e.g. nodeRestApi</li><li>run <mark>npm init</mark> to create the package.json</li><li>run <mark>npm install</mark> to install/setup dependencies.</li></ol>",
        "image": ""
      }
    ]
  },
  {
    "id": 300,
    "date": "2019/01/22",
    "title": "Install Spring CLI on Windows",
    "itemList": [
      {
        "text": "<ol><li><a href='https://repo.spring.io/release/org/springframework/boot/spring-boot-cli/2.1.2.RELEASE/spring-boot-cli-2.1.2.RELEASE-bin.zip'>Download spring-boot-cli-2.1.2.RELEASE-bin.zip</a></li><li>unzip it into a folder, e.g. C:\\spring-boot-cli-2.1.2.RELEASE-bin</li><li>add an environment variable: C:\\spring-boot-cli-2.1.2.RELEASE-bin\\spring-2.1.2.RELEASE\\bin</li><li>verify the installation: <code>spring --version</code></li></ol>",
        "image": ""
      }
    ]
  },
  {
    "id": 320,
    "date": "2019/01/22",
    "title": "Run Hello World with Groovy",
    "itemList": [
      {
        "text": "<p>Prerequisites: You have installed Spring CLI in your local. To verify if the Spring CLI is installed, run <code>spring --version</code></p>",
        "image": ""
      },
      {
        "text": "<ol><li>Create a folder, e.g. springCLIGroovy</li><li>create a file named app.groovy in the folder with the following content:<br/><div class='jumbotron'>@Controller<br/>class Example {<br/>&nbsp;&nbsp;&nbsp;&nbsp;@RequestMapping('/')<br/>&nbsp;&nbsp;&nbsp;&nbsp;@ResponseBody<br/>&nbsp;&nbsp;&nbsp;&nbsp;public String hello() {<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'hello from spring boot cli'<br/>&nbsp;&nbsp;&nbsp;&nbsp;}<br/>}</div></li><li>run <code>spring run app.groovy</code> to run the app in the embedded Tomcat.</li><li>go to localhost:8080 to verify the application.</li></ol>",
        "image": ""
      }
    ]
  },
  {
    "id": 340,
    "date": "2019/01/25",
    "title": "Install Maven on Ubuntu",
    "itemList": [
      {
        "text": "<ol><li><code>sudo apt update</code></li><li><code>sodu apt install maven</code></li><li><code>mvn --version</code></li></ol>",
        "image": ""
      }
    ]
  },
  {
    "id": 360,
    "date": "2019/03/02",
    "title": "Install Gradle",
    "itemList": [
      {
        "text": "<b>On Windows:</b><br/><ol><li>Download the latest Gradle distribution</li><li>Create a new directory C:\\Gradle with File Explorer</li><li>unzip the content folder gradle-x.x.x into the Gradle folder</li><li>This PC (or Computer) -> Properties -> Advanced System Settings -> Environmental Variables -> System Variables -> Path -> Edit -> Add an entry: <code>C:\\Gradle\\gradle-x.x.x\\bin</code></li><li>Verify the installation: <code>gradle -v</code></li></ol>",
        "image": ""
      },
      {
        "text": "<b>On Ubuntu:</b><br/><ol><li></li></ol>",
        "image": ""
      }
    ]
  },
  {
    "id": 380,
    "date": "2019/03/02",
    "title": "Create a Gradle Project",
    "itemList": [
      {
        "text": "<ol><li>Create a folder</li><li>Go to the folder</li><li><code>gradle init</code></li><li>then follow the screen prompts</li></ol>",
        "image": ""
      }
    ]
  },
  {
    "id": 400,
    "date": "2019/02/01",
    "title": "Install Minikube on Ubuntu",
    "itemList": [
      {
        "text": "<ol><li>Check if VT-x or AMD-v virtualization must be enabled in your computer’s BIOS (output should be non-empty): <code>egrep --color 'vmx|svm' /proc/cpuinfo</code></li><li>Check Kernel-based Virtual Machine (KVM) is installed: <code>kvm-ok</code> If not use <code>sudo apt install cpu-checker</code> to install the kvm.</li><li>Check if virtualbox is installed: <code>virtualbox</code>. If not, run: <code>sudo apt install virtualbox-qt</code></li><li>Check if kubectl is installed: <code>kubectl version</code>. If not, run <code>sudo snap install kubectl --classic</code></li><li>Check if minikube is installed: <code>minikube version</code>. If not, run <code>curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64 && chmod +x minikube</code></li><li>Add the Minikube executable to the path <code>sudo cp minikube /usr/local/bin && rm minikube</code></li></ol>",
        "image": ""
      },
      {
        "text": "<b>Useful Commands</b><br/><ol><li>Start minikube: <code>minikube start</code> or <code>minikube start --kubernetes-version v1.13.2</code>. If failed to download kubernetes images, then use <code>sudo kubeadm config images pull</code> to download the images, and then run start again.</li><li>Check cluster status: <code>kubectl cluster-info</code></li><li>Stop a running local kubernetes cluster: <code>minikube stop</code></li><li>Delete a local kubernetes cluster: <code>minikube delete</code></li></ol>",
        "image": ""
      }
    ]
  },
  {
    "id": 420,
    "date": "2019/03/03",
    "title": "Install GIT on Windows",
    "itemList": [
      {
        "text": "<p><ol><li>Download the latest Git for Windows installer.</li><li>When you've successfully started the installer, you should see the Git Setup wizard screen. Follow the Next and Finish prompts to complete the installation. The default options are pretty sensible for most users.</li><li>Open a Command Prompt (or Git Bash if during installation you elected not to use Git from the Windows Command Prompt), and verify the GIT is installed by using <code>git --version</code></li><li>Run the following commands to configure your Git username and email using the following commands, replacing Emma's name with your own. These details will be associated with any commits that you create: <code>git config --global user.name 'Emma Paris'</code> and <code>git config --global user.email 'eparis@atlassian.com'</code></li></ol></p>",
        "image": ""
      }
    ]
  },
  {
    "id": 440,
    "date": "2019/03/04",
    "title": "Install/Uninstall GIT on Ubuntu",
    "itemList": [
      {
        "text": "<p><b>Install</b>:<br/><ol><li>sudo apt update</li><li>sudo apt install git</li><li>git --version</li></ol></p>",
        "image": ""
      },
      {
        "text": "<p><b>Uninstall</b>:<br/><ol><li>sudo apt-get remove git</li></ol></p>",
        "image": ""
      }
    ]
  },
  {
    "id": 460,
    "date": "2019/03/07",
    "title": "Create Windows 2016 VM on Azure",
    "itemList": [
      {
        "text": "<p><b>Creat VM</b>:<br/><ol><li>Choose Create a resource in the upper left-hand corner of the Azure portal.</li><li>In the search box above the list of Azure Marketplace resources, search for and select Windows Server 2016 Datacenter (Region: Canada East), then choose Create</li><li>In the Basics tab, under Project details, make sure the correct subscription is selected and then choose things: for INBOUND PORT RULES, choose 'Allow selected ports' - RDP, HTTP</li><li>Leave the remaining tabs defaults and then select the Review + create button at the bottom of the page</li><li>Before Create, select 'Generate template' to generate template zip file</li></ol></p>",
        "image": ""
      },
      {
        "text": "<p><b>Connect to VM</b>:<br/><ol><li>Click the Connect button on the virtual machine properties page</li><li>In the Connect to virtual machine page, keep the default options to connect by DNS name over port 3389 and click Download RDP file</li><li>Open the downloaded RDP file and click Connect when prompted</li><li>In the Windows Security window, select More choices and then Use a different account. Type the username as localhost\\username, enter password you created for the virtual machine, and then click OK</li><li>You may receive a certificate warning during the sign-in process. Click Yes or Continue to create the connection</li></ol></p>",
        "image": ""
      },
      {
        "text": "<p><b>Install JDK 8 on VM</b>:<br/><ol><li>Download JDK</li><li>Install JDK</li><li>Set JAVA_HOME and path</li></ol></p>",
        "image": ""
      },
      {
        "text": "<p><b>Install Tomcat 9 on VM</b>:<br/><ol><li>Download the Tomcat zip</li><li>unzip to C:\\apache-tomcat-9.0.16</li><li>cd C:\\apache-tomcat-9.0.16\\bin</li><li>startup</li><li>localhost:80</li></ol></p>",
        "image": ""
      }
    ]
  },
  {
    "id": 480,
    "date": "2019/03/23",
    "title": "Install/Uninstall Tomcat As Windows Service",
    "itemList": [
      {
        "text": "<p><b>Install</b><li>Go to the bin folder in the installation folder of Tomcat</li><li>Install Tomcat as service named tomcat8 by calling service.bat install <servicename>; for instance C:\\tomcat\\apache-tomcat-8.5.11\\bin>service.bat install tomcat8</li></ol></p>",
        "image": ""
      },
      {
        "text": "<p><b>Uninstall</b><li>Go to the bin folder in the installation folder of Tomcat</li><li>Unnnstall Tomcat as service named tomcat8 by calling service.bat uninstall <servicename>; for instance C:\\tomcat\\apache-tomcat-8.5.11\\bin>service.bat install tomcat8</li></ol></p>",
        "image": ""
      }
    ]
  },
  {
    "id": 500,
    "date": "2019/10/26",
    "title": "Install Xrdp Server (Remote Desktop) on Ubuntu 18.04",
    "itemList": [
      {
        "text": "<p>Generally, Linux servers don’t have a desktop environment installed. Our first step is to install X11 and a lightweight desktop environment that will act as a backend for Xrdp.</p><p>There are several desktop environments (DE) available in Ubuntu repositories. We’ll be installing Xfce. It is a fast, stable and lightweight desktop environment, which makes it ideal for usage on a remote server.</p>",
        "image": ""
      },
      {
        "text": "<div class='jumbotron'><p>sudo apt update<br>sudo apt install xfce4 xfce4-goodies xorg dbus-x11 x11-xserver-utils<br>sudo apt install xrdp<br>sudo systemctl status xrdp<br>sudo nano /etc/xrdp/xrdp.ini<br>Add the following line at the end of the file:<br>exec startxfce4<br>sudo systemctl restart xrdp<br>sudo ufw allow 3389<br></p></div>",
        "image": ""
      },
      {
        "text": "<p>You can use RDC to connect to the Ubuntu server.</p>",
        "image": ""
      }
    ]
  },
  {
    "id": 520,
    "date": "2019/12/12",
    "title": "Install Xrdp Server (Remote Desktop) on azure Ubuntu 18.04 VM",
    "itemList": [
      {
        "text": "<p>First, SSH to your VM:<br><code>ssh user@myvm</code></p>",
        "image": ""
      },
      {
        "text": "<p>Then install xfce using apt as follows:<br><code>sudo apt-get update</code><br><code>sudo apt-get install xfce4</code></p>",
        "image": ""
      },
      {
        "text": "<p>Then Install xrdp on your Ubuntu VM as follows:<br><code>sudo apt-get -y install xrdp</code><br><code>sudo systemctl enable xrdp</code></p>",
        "image": ""
      },
      {
        "text": "<p>Then Configure xrdp to use xfce as your desktop environment as follows:<br><code>echo xfce4-session >~/.xsession</code></p>",
        "image": ""
      },
      {
        "text": "<p>Then Restart the xrdp service for the changes to take effect as follows:<br><code>sudo service xrdp restart</code></p>",
        "image": ""
      },
      {
        "text": "<p>To allow Remote Desktop traffic to reach your Linux VM, a network security group rule needs to be created that allows TCP on port 3389 to reach your VM. The following example creates a network security group rule with az vm open-port on port 3389. From the Azure CLI, not the SSH session to your VM, open the following network security group rule:<br><code>az vm open-port --resource-group myResourceGroup --name myVM --port 3389</code></p>",
        "image": ""
      }
    ]
  },
  {
    "id": 560,
    "date": "2019/11/13",
    "title": "Install ETCD on Ubuntu 18.10",
    "itemList": [
      {
        "text": "<div class='jumbotron'><p>sudo apt install etcd-server<br>etcd --version</p></div>",
        "image": ""
      }
    ]
  }
]