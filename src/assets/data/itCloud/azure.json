[
  {
    "id": 100,
    "date": "2020/04/24",
    "title": "Azure infrastructure security",
    "itemList": [
      {
        "text": "<p>Microsoft Azure runs in datacenters managed and operated by Microsoft. These geographically dispersed datacenters comply with key industry standards, such as ISO/IEC 27001:2013 and NIST SP 800-53, for security and reliability. The datacenters are managed, monitored, and administered by Microsoft operations staff. The operations staff has years of experience in delivering the world’s largest online services with 24 x 7 continuity.</p>",
        "image": ""
      },
      {
        "text": "<p><b>Securing the Azure infrastructure</b></p>",
        "image": "../assets/image/itCloud/azure/azureInfraSec.PNG"
      }
    ]
  },
  {
    "id": 200,
    "date": "2020/04/24",
    "title": "Shared Responsibility",
    "itemList": [
      {
        "text": "<p>As you consider and evaluate public cloud services, it’s critical to understand the shared responsibility model and which security tasks are handled by the cloud provider and which tasks are handled by you. The workload responsibilities vary depending on whether the workload is hosted on Software as a Service (SaaS), Platform as a Service (PaaS), Infrastructure as a Service (IaaS), or in an on-premises datacenter.</p>",
        "image": ""
      },
      {
        "text": "<p>In an on-premises datacenter, you own the whole stack. As you move to the cloud some responsibilities transfer to Microsoft. The following diagram illustrates the areas of responsibility between you and Microsoft, according to the type of deployment of your stack.</p>",
        "image": "../assets/image/itCloud/azure/sharedSecurity.PNG"
      }
    ]
  },
  {
    "id": 250,
    "date": "2020/04/24",
    "title": "Azure Applications/Services Security",
    "itemList": [
      {
        "text": "<p>Depending on the cloud service model, there is variable responsibility for who is responsible for managing the security of the application or service. There are capabilities available in the Azure Platform to assist you in meeting these responsibilities through built-in features, and through partner solutions that can be deployed into an Azure subscription.</p>",
        "image": ""
      },
      {
        "text": "<p>The built-in capabilities are organized in six functional areas: Operations, Applications, Storage, Networking, Compute, and Identity. Additional detail on the features and capabilities available in the Azure Platform in these six areas are provided through summary information.</p>",
        "image": ""
      },
      {
        "text": "<p><b>Operations</b></p>",
        "image": ""
      },
      {
        "text": "<ul><li>Security and Audit Dashboard</li><li>Azure Resource Manager</li><li>Application Insights</li><li>Azure Monitor</li><li>Azure Monitor logs</li><li>Azure Advisor</li><li>Azure Security Center</li></ul>",
        "image": ""
      },
      {
        "text": "<p><b>Applications</b></p>",
        "image": ""
      },
      {
        "text": "<ul><li>Web Application vulnerability scanning</li><li>Penetration Testing</li><li>Web Application firewall</li><li>Authentication and authorization in Azure App Service</li><li>Layered Security Architecture</li><li>Web server diagnostics and application diagnostics</li><li>Web server diagnostics</li><li>Application diagnostics</li></ul>",
        "image": ""
      },
      {
        "text": "<p><b>Storage</b></p>",
        "image": ""
      },
      {
        "text": "<ul><li>Role-Based Access Control (RBAC)</li><li>Shared Access Signature</li><li>Encryption in Transit</li><li>Encryption at rest</li><li>Storage Analytics</li><li>Enabling Browser-Based Clients Using Cross-Origin Resource Sharing (CORS)</li></ul>",
        "image": ""
      },
      {
        "text": "<p><b>Networking</b></p>",
        "image": ""
      },
      {
        "text": "<ul><li>Network Layer Controls</li><li>Network Security Groups</li><li>Route Control and Forced Tunneling</li><li>Virtual Network Security Appliances</li><li>Azure Virtual Network</li><li>VPN Gateway</li><li>Express Route</li><li>Application Gateway</li><li>Web Application Firewall</li><li>Traffic Manager</li><li>Azure Load Balancer</li><li>Internal DNS</li><li>Azure DNS</li><li>Azure Monitor logs NSGs</li><li>Security Center</li></ul>",
        "image": ""
      },
      {
        "text": "<p><b>Compute</b></p>",
        "image": ""
      },
      {
        "text": "<ul><li>Antimalware & Antivirus</li><li>Hardware Security Module</li><li>Virtual machine backup</li><li>Azure Site Recovery</li><li>SQL VM TDE</li><li>VM Disk Encryption</li><li>Virtual networking</li><li>Patch Updates</li><li>Security policy management and reporting</li></ul>",
        "image": ""
      },
      {
        "text": "<p><b>Identity and access management</b></p>",
        "image": ""
      },
      {
        "text": "<ul><li>Secure Identity</li><li>Secure Apps and data</li></ul>",
        "image": ""
      }
    ]
  },
  {
    "id": 300,
    "date": "2020/04/24",
    "title": "Isolation in the Azure",
    "itemList": [
      {
        "text": "<p>Azure allows you to run applications and virtual machines (VMs) on shared physical infrastructure. One of the prime economic motivations to running applications in a cloud environment is the ability to distribute the cost of shared resources among multiple customers. This practice of multi-tenancy improves efficiency by multiplexing resources among disparate customers at low costs. Unfortunately, it also introduces the risk of sharing physical servers and other infrastructure resources to run your sensitive applications and VMs that may belong to an arbitrary and potentially malicious user.</p>",
        "image": ""
      },
      {
        "text": "<p><b>Tenant Level Isolation</b></p>",
        "image": ""
      },
      {
        "text": "<p>One of the primary benefits of cloud computing is concept of a shared, common infrastructure across numerous customers simultaneously, leading to economies of scale. This concept is called multi-tenancy. Microsoft works continuously to ensure that the multi-tenant architecture of Microsoft Cloud Azure supports security, confidentiality, privacy, integrity, and availability standards.</p>",
        "image": ""
      },
      {
        "text": "<p>In the cloud-enabled workplace, a tenant can be defined as a client or organization that owns and manages a specific instance of that cloud service. With the identity platform provided by Microsoft Azure, a tenant is simply a dedicated instance of Azure Active Directory (Azure AD) that your organization receives and owns when it signs up for a Microsoft cloud service.</p>",
        "image": ""
      }
    ]
  },
  {
    "id": 400,
    "date": "2019/12/12",
    "title": "Create a Custom VM Image",
    "itemList": [
      {
        "text": "<p>To create an image of a virtual machine, you need to prepare the VM by deprovisioning, deallocating, and then marking the source VM as generalized. Once the VM has been prepared, you can create an image.</p>",
        "image": ""
      },
      {
        "text": "<p>First ssh to the VM:<br><code>ssh user@ip</code></p>",
        "image": ""
      },
      {
        "text": "<p>Then deprovision VM:<br><code>sudo waagent -deprovision+user -force</code></p>",
        "image": ""
      },
      {
        "text": "<p>Then close the SSH session:<br><code>exit</code></p>",
        "image": ""
      },
      {
        "text": "<p>Then deallocate the VM using az vm deallocate:<br><code>az vm deallocate --resource-group myResourceGroup --name myVM</code></p>",
        "image": ""
      },
      {
        "text": "<p>set the state of the VM as generalized with az vm generalize so the Azure platform knows the VM has been generalized. You can only create an image from a generalized VM:<br><code>az vm generalize --resource-group myResourceGroup --name myVM</code></p>",
        "image": ""
      },
      {
        "text": "<p>Then you can create an image of the VM by using az image create. The following example creates an image named myImage from a VM named myVM:<br><code>az image create --resource-group myResourceGroup --name myImage --source myVM</code></p>",
        "image": ""
      },
      {
        "text": "<p>Then you can create one or more new VMs from the image using az vm create. The following example creates a VM named myVMfromImage from the image named myImage:<br><code>az vm create --resource-group myResourceGroup --name myVMfromImage --image myImage --admin-username azureuser --generate-ssh-keys</code></p>",
        "image": ""
      }
    ]
  },
  {
    "id": 500,
    "date": "2019/12/12",
    "title": "Install the Elastic Stack on an Azure VM",
    "itemList": [
      {
        "text": "<p>First, create a RG:<br><code>az group create --name myResourceGroup --location eastus</code></p>",
        "image": ""
      },
      {
        "text": "<p>Then create a VM:<br><code>az vm create --resource-group myResourceGroup --name myVM --image UbuntuLTS --admin-username azureuser --generate-ssh-keys</code></p>",
        "image": ""
      },
      {
        "text": "<p>Then find public IP address of your VM:<br><code>az network public-ip list --resource-group myResourceGroup --query [].ipAddress</code></p>",
        "image": ""
      },
      {
        "text": "<p>Then create an SSH session with the virtual machine:<br><code>ssh azureuser@ip</code></p>",
        "image": ""
      },
      {
        "text": "<p>Then import the Elasticsearch signing key and update your APT sources list to include the Elastic package repository:<br><code>wget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo apt-key add -<br>echo 'deb https://artifacts.elastic.co/packages/5.x/apt stable main' | sudo tee -a /etc/apt/sources.list.d/elastic-5.x.list</code></p>",
        "image": ""
      },
      {
        "text": "<p>Then install Java VM:<br><code>sudo apt update && sudo apt install openjdk-8-jre-headless</code><br><code>export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64</code></p>",
        "image": ""
      },
      {
        "text": "<p>update Ubuntu package sources and install Elasticsearch, Kibana, and Logstash:<br><code>sudo apt update && sudo apt install elasticsearch kibana logstash</code></p>",
        "image": ""
      },
      {
        "text": "<p>Start Elasticsearch on your VM:<br><code>sudo systemctl start elasticsearch.service</code></p>",
        "image": ""
      },
      {
        "text": "<p>Verify that Elasticsearch is running on the VM:<br><code>sudo curl -XGET 'localhost:9200/'</code></p>",
        "image": ""
      },
      {
        "text": "<p>Start Logstash and add data to Elasticsearch:<br><code>sudo systemctl start logstash.service</code><br><code>sudo /usr/share/logstash/bin/logstash -e 'input { stdin { } } output { stdout {} }'</code></p>",
        "image": ""
      },
      {
        "text": "<p>Set up Logstash to forward the kernel messages from this VM to Elasticsearch. Create a new file in an empty directory called vm-syslog-logstash.conf and paste in the following Logstash configuration:</code></p>",
        "image": "../assets/image/itCloud/azure/logstash.png"
      },
      {
        "text": "<p>Test this configuration and send the syslog data to Elasticsearch:<br><code>sudo /usr/share/logstash/bin/logstash -f vm-syslog-logstash.conf</code></p>",
        "image": ""
      },
      {
        "text": "<p>Edit /etc/kibana/kibana.yml and change the IP address Kibana listens on so you can access it from your web browser:<br><code>server.host:'0.0.0.0'</code></p>",
        "image": ""
      },
      {
        "text": "<p>Start Kibana:<br><code>sudo systemctl start kibana.service</code></p>",
        "image": ""
      },
      {
        "text": "<p>Open port 5601 from the Azure CLI to allow remote access to the Kibana console:<br><code>az vm open-port --port 5601 --resource-group myResourceGroup --name myVM</code></p>",
        "image": ""
      },
      {
        "text": "<p>Open up the Kibana console (internet access):<br><code>http://vm_ip:5601/app/kibana#/discover?_g=()</code></p>",
        "image": ""
      }
    ]
  },
  {
    "id": 600,
    "date": "2019/12/14",
    "title": "Secure Nginx on a Linux VM in Azure with SSL cert",
    "itemList": [
      {
        "text": "<p>First, create a RG:<br><code>az group create --name myResourceGroupSecureWeb --location eastus</code></p>",
        "image": ""
      },
      {
        "text": "<p>Then create a Key Vault with az keyvault create and enable it for use when you deploy a VM:<br><code>keyvault_name=mykeyvaultname99</code></p>",
        "image": ""
      },
      {
        "text": "<p>Then create a Key Vault with az keyvault create and enable it for use when you deploy a VM:<br><code>az keyvault create --resource-group myResourceGroupSecureWeb --name $keyvault_name --enabled-for-deployment</code></p>",
        "image": ""
      },
      {
        "text": "<p>For production use, you should import a valid certificate signed by trusted provider with az keyvault certificate import. For this tutorial, the following example shows how you can generate a self-signed certificate with az keyvault certificate create that uses the default certificate policy:<br><code>az keyvault certificate create --vault-name $keyvault_name --name mycert --policy '$(az keyvault certificate get-default-policy)'</code></p>",
        "image": ""
      },
      {
        "text": "<p>To use the certificate during the VM create process, obtain the ID of your certificate with az keyvault secret list-versions:<br><code>secret=$(az keyvault secret list-versions --vault-name $keyvault_name --name mycert --query '[?attributes.enabled].id' --output tsv)</code></p>",
        "image": ""
      },
      {
        "text": "<p>Convert the certificate with az vm secret format:<br><code>vm_secret=$(az vm secret format --secrets '$secret' -g myResourceGroupSecureWeb --keyvault $keyvault_name)</code></p>",
        "image": ""
      },
      {
        "text": "<p><p>Cloud-init is a widely used approach to customize a Linux VM as it boots for the first time. You can use cloud-init to install packages and write files, or to configure users and security. As cloud-init runs during the initial boot process, there are no additional steps or required agents to apply your configuration.</p><p>When you create a VM, certificates and keys are stored in the protected /var/lib/waagent/ directory. To automate adding the certificate to the VM and configuring the web server, use cloud-init. In this example, you install and configure the NGINX web server. You can use the same process to install and configure Apache.</p><p>Create a file named cloud-init-web-server.txt and paste the following configuration:</p></p>",
        "image": "../assets/image/itCloud/azure/azureCloudInit.png"
      },
      {
        "text": "<p>Now create a VM with az vm create. The certificate data is injected from Key Vault with the --secrets parameter. You pass in the cloud-init config with the --custom-data parameter:<br><code>az vm create --resource-group myResourceGroupSecureWeb --name myVM --image UbuntuLTS --admin-username azureuser --generate-ssh-keys --custom-data cloud-init-web-server.txt --secrets '$vm_secret'</code></p>",
        "image": ""
      },
      {
        "text": "<p>To allow secure web traffic to reach your VM, open port 443 from the Internet with az vm open-port:<br><code>az vm open-port --resource-group myResourceGroupSecureWeb --name myVM --port 443</code></p>",
        "image": ""
      },
      {
        "text": "<p>To access the site:<br><code>https://ip</code></p>",
        "image": ""
      }
    ]
  },
  {
    "id": 700,
    "date": "2019/12/15",
    "title": "Find and delete unattached NICs",
    "itemList": [
      {
        "text": "<p>The virtualMachine property for a NIC stores the ID and resource group of the VM the NIC is attached to. The following script loops through all the NICs in a subscription and checks if the virtualMachine property is null. If this property is null, the NIC is not attached to a VM.</p>",
        "image": ""
      },
      {
        "text": "<p>To view all the unattached NICs, it's highly recommend to first run the script with the deleteUnattachedNics variable to 0. To delete all the unattached NICs after you review the list output, run the script with deleteUnattachedNics to 1.</p>",
        "image": ""
      },
      {
        "text": "<p>Then run the following az cli commands in Azure Cloud Shell:</p>",
        "image": "../assets/image/itCloud/azure/autoDeleteNics.png"
      }
    ]
  },
  {
    "id": 800,
    "date": "2020/01/18",
    "title": "Azure AD vs. On-Premises AD",
    "itemList": [
      {
        "text": "<p>The Active Directory capabilities that are part of Windows Server actually include several different roles, such as Active Directory Certificate Services (AD CS), Active Directory Lightweight Directory Services (AD LDS), Active Directory Federation Services (AD FS), and Active Directory Rights Management Services (AD RMS). However, most people think of Active Directory as the Active Directory Domain Services role, and this 'Active Directory' is what most people mean when comparing AD with Azure Active Directory.</p>",
        "image": ""
      },
      {
        "text": "<p>The reality is that Active Directory Domain Services (henceforth just Active Directory) in Windows Server is completely different from Azure Active Directory (Azure AD), and they actually have different focus areas. When you think about Active Directory you're talking about a true directory service that has a hierarchical structure (based on X.500) that uses DNS as its locator mechanism and can be interacted with via LDAP. In addition, Active Directory primarily uses Kerberos for authentication. Active Directory enables organizational units (OUs) and Group Policy Objects (GPOs) in addition to actually joining machines to the domain, and trusts are created between domains.</p>",
        "image": ""
      },
      {
        "text": "<p>Azure AD, while having some aspects of a directory service, is really an identity solution and allows users and groups to be created but in a flat structure without OUs or GPOs. You can't join a machine to Azure AD. There's no Kerberos authentication, and you can't query it via LDAP. This is OK because the things Azure AD doesn't have make sense on-premises, where all types of communication are possible. However, Azure AD is focused around identity throughout the Internet, where the types of communication are typically limited to HTTP (port 80) and HTTPS (port 443) and are used by all types of devices—not just corporate assets. Authentication is performed through a number of protocols such as SAML, WS-Federation, and OAuth. It's possible to query Azure AD but instead of using LDAP you use a REST API called AD Graph API. These all work over HTTP and HTTPS.</p>",
        "image": ""
      },
      {
        "text": "<p>When you think about using Azure AD, you'll use it for authentication for Internet-based services such as Office 365 and Azure, as well as much more, including Facebook and thousands of other services that are already federated with Azure AD (which mean they trust Azure AD without you having to do anything other than enable that application or service to be used by your users).</p>",
        "image": ""
      },
      {
        "text": "<p>For the best seamless experience, you think about combining your on-premises Active Directory with Azure AD by setting up directory synchronization (including password sync) and federation. This allows users on their corporate assets to log on with their AD account and when they access Internet services, such as Office 365, authentication with Azure AD just happens seamlessly via the federation, allowing access to all the different services that Azure AD is federated with. This is actually a great benefit of federating your on-premises AD with Azure AD. It's possible for your organization to federate with all the different companies out on the Internet, but this is a lot of work to set up and maintain. However, if you just federate with Azure AD then you're now federated by proxy with all the organizations that Azure AD is federated with—which is pretty much all of the major services on the Internet today. Think of Azure AD as acting like a federation hub.</p>",
        "image": ""
      }
    ]
  },
  {
    "id": 900,
    "date": "2020/01/20",
    "title": "Microsoft ID platform Endpoints",
    "itemList": [
      {
        "text": "<p><b>Fetch the OpenID Connect metadata document</b> - https://login.microsoftonline.com/{tenant}/v2.0/.well-known/openid-configuration</p>",
        "image": "../assets/image/itCloud/azure/openIDConnectEndPoint.png"
      },
      {
        "text": "<p>Typically, you would use this metadata document to configure an OpenID Connect library or SDK; the library would use the metadata to do its work. However, if you're not using a pre-built OpenID Connect library, you can follow the steps in the remainder of this article to do sign-in in a web app by using the Microsoft identity platform endpoint.</p>",
        "image": "../assets/image/itCloud/azure/openIDConnectEndPoint.png"
      }
    ]
  },
  {
    "id": 1000,
    "date": "2020/01/30",
    "title": "Best Practices for network security",
    "itemList": [
      {
        "text": "<p><ul><li><b>Use strong network controls</b><br>As you plan your network and the security of your network, we recommend that you centralize:<ul><li>Management of core network functions like ExpressRoute, virtual network and subnet provisioning, and IP addressing.</li><li>Governance of network security elements, such as network virtual appliance functions like ExpressRoute, virtual network and subnet provisioning, and IP addressing.</li></ul><li>Logically segment subnets</li><li>Adopt a Zero Trust approach</li><li>Control routing behavior</li><li>Use virtual network appliances</li><li>Deploy perimeter networks (DMZ) for security zones</li><li>Avoid exposure to the internet with dedicated WAN links</li><li>Disable RDP/SSH Access to virtual machines</li><li>Secure your critical Azure service resources to only your virtual networks</li><ul></p>",
        "image": ""
      }
    ]
  },
  {
    "id": 1100,
    "date": "2020/03/03",
    "title": "Azure Resource Manager",
    "itemList": [
      {
        "text": "<p>Azure Resource Manager is the deployment and management service for Azure. It provides a management layer that enables you to create, update, and delete resources in your Azure subscription. You use management features, like access control, locks, and tags, to secure and organize your resources after deployment.</p>",
        "image": ""
      },
      {
        "text": "<p><b>Consistent management layer</b></p><p>When a user sends a request from any of the Azure tools, APIs, or SDKs, Resource Manager receives the request. It authenticates and authorizes the request. Resource Manager sends the request to the Azure service, which takes the requested action. Because all requests are handled through the same API, you see consistent results and capabilities in all the different tools.</p><p>The following image shows the role Azure Resource Manager plays in handling Azure requests.</p>",
        "image": ""
      },
      {
        "text": "<p>Then run the following az cli commands in Azure Cloud Shell:</p>",
        "image": "../assets/image/itCloud/azure/arm.png"
      },
      {
        "text": "<p><b>Features of Resource Manager templates</b><p>To implement infrastructure as code for your Azure solutions, use Azure Resource Manager templates. The template is a JavaScript Object Notation (JSON) file that defines the infrastructure and configuration for your project.</p><ul><li>Declarative syntax</li><li>Repeatable results</li><li>Orchestration</li><li>Built-in validation</li><li>Modular files</li><li>Create any Azure resource</li><li>Tracked deployments</li><li>Policy as code</li><li>Deployment Blueprints</li><li>CI/CD integration</li><li>Exportable code</li><li>Authoring tools</li></ul></p>",
        "image": ""
      }
    ]
  },
  {
    "id": 2000,
    "date": "2019/12/10",
    "title": "Azure CLI",
    "itemList": [
      {
        "text": "<p><code>az account show</code> - show your account info</p>",
        "image": ""
      },
      {
        "text": "<p><code>az acr build -t 'captureorder:{{.Run.ID}}' -r <unique-acr-name></code></p>",
        "image": ""
      },
      {
        "text": "<p><code>az acr create --resource-group <resource-group> --name <unique-acr-name> --sku Standard --location eastus</code></p>",
        "image": ""
      },
      {
        "text": "<p><code>az aks update -n <aks-cluster-name> -g <resource-group> --attach-acr <your-acr-name></code></p>",
        "image": ""
      },
      {
        "text": "<p><code>az ad sp create-for-rbac --role='Monitoring Reader' --scopes='/subscriptions/cad64ad8-6bce-44ea-bd9f-b45beb03458a/resourceGroups/PromitorRG'</code> - Create a Service Principal</p>",
        "image": ""
      },           
      {
        "text": "<p><code>az aks get-credentials --name PromitorCluster --resource-group PromitorRG</code> - Get your cluster’s credentials. This will save these credentials to your kubeconfig file and set your new cluster as your current context for all kubectl commands.</p>",
        "image": ""
      },
      {
        "text": "<p><code>az aks enable-addons --resource-group k8s --name k8sCluster --addons monitoring --workspace-resource-id /subscriptions/cad64ad8-6bce-44ea-bd9f-b45beb03458a/resourcegroups/k8s/providers/microsoft.operationalinsights/workspaces/k8sworkspace99</code> - enable the monitoring add-on</p>",
        "image": ""
      },
      {
        "text": "<p><code>az aks scale --resource-group <resource-group> --name <unique-aks-cluster-name> --node-count 4</code></p>",
        "image": ""
      },
      {
        "text": "<p><code>az container create -g <resource-group> -n loadtest --image azch/loadtest --restart-policy Never -e SERVICE_ENDPOINT=https://<hostname order capture service></code></p>",
        "image": ""
      },
      {
        "text": "<p><code>az container logs -g <resource-group> -n loadtest</code></p>",
        "image": ""
      },
      {
        "text": "<p><code>az container delete -g <resource-group> -n loadtest</code></p>",
        "image": ""
      },
      {
        "text": "<p><code>az group create --name myResourceGroup --location eastus</code> - create a group</p>",
        "image": ""
      },
      {
        "text": "<p><code>az group list</code> - list groups</p>",
        "image": ""
      },
      {
        "text": "<p><code>az login</code></p>",
        "image": ""
      },
      {
        "text": "<p><code>az network public-ip list --resource-group myResourceGroup --query [].ipAddress</code> - find public IP address</p>",
        "image": ""
      },
      {
        "text": "<p><code>az resource create --resource-type Microsoft.OperationalInsights/workspaces --name k8sWorkspace99 --resource-group k8s --location eastus --properties '{}' -o table</code></p>",
        "image": ""
      },
      {
        "text": "<p><code>az resource show --resource-type Microsoft.OperationalInsights/workspaces --resource-group k8s --name k8sWorkspace99 --query 'id' -o tsv</code></p>",
        "image": ""
      },
      {
        "text": "<p><code>az servicebus namespace create --resource-group PromitorRG --name service-bus-ns99 --location eastus</code> - Create a servicebus namespace</p>",
        "image": ""
      },
      {
        "text": "<p><code>az servicebus namespace authorization-rule keys list --resource-group PromitorRG --namespace-name service-bus-ns99 --name RootManageSharedAccessKey --query primaryConnectionString --output tsv</code> - Get the connection string for this Service Bus namespace</p>",
        "image": ""
      },
      {
        "text": "<p><code>az servicebus queue create --resource-group PromitorRG --namespace-name service-bus-ns99 --name demo_queue</code> - Create a servicebus queue</p>",
        "image": ""
      },
      {
        "text": "<p><code>az vm create --resource-group myResourceGroup --name myVM --image UbuntuLTS --admin-username azureuser --generate-ssh-keys</code> - create a VM</p>",
        "image": ""
      },
      {
        "text": "<p><code>az vm open-port --port 5601 --resource-group myResourceGroup --name myVM</code> - Open port 5601 from the Azure CLI to allow remote access</p>",
        "image": ""
      },
      {
        "text": "<p><code>echo version=$(az aks get-versions -l eastus --query 'orchestrators[-1].orchestratorVersion' -o tsv)</code> - Obtain AKS version</p>",
        "image": ""
      },
      {
        "text": "<p><code>echo sub=$(az account show --query 'id' -o tsv)</code> - Obtain your Azure subscription ID</p>",
        "image": ""
      },
      {
        "text": "<p><code>helm install orders-mongo stable/mongodb --set mongodbUsername=orders-user,mongodbPassword=orders-password,mongodbDatabase=akschallenge</code> - deploy MongoDB</p>",
        "image": ""
      },
      {
        "text": "<p><code>helm repo add stable https://kubernetes-charts.storage.googleapis.com/</code> - Add the stable Helm charts repository</p>",
        "image": ""
      },
      {
        "text": "<p><code>helm repo update</code> - Upate the repositories</p>",
        "image": ""
      },
      {
        "text": "<p><code>sensible-editor cloud-init-jenkins.txt</code> - enter sensible-editor fileName to create the file and see a list of available editors:<br></p>",
        "image": ""
      },
      {
        "text": "<p><code>ssh azureuser@40.87.62.106</p>",
        "image": ""
      }
    ]
  },
  {
    "id": 2200,
    "date": "2020/07/16",
    "title": "Azure API for FHIR",
    "itemList": [
      {
        "text": "<p>Azure API for FHIR enables rapid exchange of data through Fast Healthcare Interoperability Resources (FHIR®) APIs, backed by a managed Platform-as-a Service (PaaS) offering in the cloud. It makes it easier for anyone working with health data to ingest, manage, and persist Protected Health Information PHI in the cloud:<ul><li>Managed FHIR service, provisioned in the cloud in minutes</li><li>Enterprise-grade, FHIR®-based endpoint in Azure for data access, and storage in FHIR® format</li><li>High performance, low latency</li><li>Secure management of Protected Health Data (PHI) in a compliant cloud environment</li><li>SMART on FHIR for mobile and web implementations</li><li>Control your own data at scale with Role-Based Access Control (RBAC)</li><li>Audit log tracking for access, creation, modification, and reads within each data store</li></ul></p>",
        "image": ""
      },
      {
        "text": "<p>FHIR capabilities from Microsoft are available in two configurations: <ul><li>Azure API for FHIR – A PaaS offering in Azure, easily provisioned in the Azure portal and managed by Microsoft</li><li>FHIR Server for Azure – an open-source project that can be deployed into your Azure subscription, available on GitHub at https://github.com/Microsoft/fhir-server.</li></ul></p>",
        "image": ""
      },
      {
        "text": "<p>For use cases that requires extending or customizing the FHIR server or require access the underlying services—such as the database—without going through the FHIR APIs, developers should choose the open-source FHIR Server for Azure. For implementation of a turn-key, production-ready FHIR API and backend service where persisted data should only be accessed through the FHIR API, developers should choose the Azure API for FHIR.</p>",
        "image": ""
      },
      {
        "text": "<p>To validate that the new FHIR API account is provisioned, fetch a capability statement by pointing a browser to https://ACCOUNT-NAME.azurehealthcareapis.com/metadata</p>",
        "image": ""
      },
      {
        "text": "<p>https://FHIR ACCOUNT NAME.azurehealthcareapis.com</p>",
        "image": ""
      },
      {
        "text": "<p>https://FHIR ACCOUNT NAME.azurehealthcareapis.com/Patient</p>",
        "image": ""
      },
      {
        "text": "<p><b>IoT Connector (preview)</b><br><p>IoT Connector is an optional feature of Azure API for FHIR that provides the capability to ingest data from Internet of Medical Things (IoMT) devices. Internet of Medical Things is a category of IoT devices that capture and exchange health & wellness data with other healthcare IT systems over network. Some examples of IoMT devices include fitness and clinical wearables, monitoring sensors, activity trackers, point of care kiosks, or even a smart pill. The IoT Connector feature enables you to quickly set up a service to ingest IoMT data into Azure API for FHIR in a scalable, secure, and compliant manner.</p><p>IoT Connector can accept any JSON-based messages sent out by an IoMT device. This data is first transformed into appropriate FHIR-based Observation resources and then persisted into Azure API for FHIR. The data transformation logic is defined through a pair of mapping templates that you configure based on your message schema and FHIR requirements. Device data can be pushed directly to IoT Connector or seamlessly used in concert with other Azure IoT solutions (Azure IoT Hub and Azure IoT Central). IoT Connector provides a secure data pipeline while allowing the Azure IoT solutions manage provisioning and maintenance of the physical devices.</p></p>",
        "image": ""
      }
    ]
  }
]